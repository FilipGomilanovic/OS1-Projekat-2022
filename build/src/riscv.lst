GAS LISTING /tmp/cc99OXwW.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** #include "../h/codes.h"
  10:src/riscv.cpp **** #include "../h/syscall_c.h"
  11:src/riscv.cpp **** 
  12:src/riscv.cpp **** void Riscv::popSppSpie()
  13:src/riscv.cpp **** {
  12              		.loc 1 13 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  14:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 14 5
  21              		.loc 1 14 38 is_stmt 0
  22              	#APP
  23              	# 14 "src/riscv.cpp" 1
  15              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 15 5 is_stmt 1
  27              		.loc 1 15 29 is_stmt 0
  28              	# 15 "src/riscv.cpp" 1
  16              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 16 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
GAS LISTING /tmp/cc99OXwW.s 			page 2


  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB34:
  17:src/riscv.cpp **** 
  18:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  19:src/riscv.cpp **** {
  47              		.loc 1 19 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F8 		addi	sp,sp,-128
  50              		.cfi_def_cfa_offset 128
  51 0024 233C1106 		sd	ra,120(sp)
  52 0028 23388106 		sd	s0,112(sp)
  53              		.cfi_offset 1, -8
  54              		.cfi_offset 8, -16
  55 002c 13040108 		addi	s0,sp,128
  56              		.cfi_def_cfa 8, 0
  20:src/riscv.cpp **** 
  21:src/riscv.cpp ****     uint64 scause = r_scause();
  57              		.loc 1 21 5
  58              	.LBB52:
  59              	.LBB53:
  60              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
GAS LISTING /tmp/cc99OXwW.s 			page 3


  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp **** private:
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap handler
  85:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/riscv.hpp **** {
  91:src/../h/riscv.hpp ****     uint64 volatile scause;
  61              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
GAS LISTING /tmp/cc99OXwW.s 			page 4


  62              		.loc 2 92 5
  63              		.loc 2 92 72 is_stmt 0
  64              	#APP
  65              	# 92 "src/../h/riscv.hpp" 1
  93              	    return scause;
  66              		csrr a5, scause
  67              	# 0 "" 2
  68              	#NO_APP
  69 0034 233CF4FA 		sd	a5,-72(s0)
  70              		.loc 2 93 5 is_stmt 1
  71              		.loc 2 93 12 is_stmt 0
  72 0038 033784FB 		ld	a4,-72(s0)
  73              	.LVL0:
  74              	.LBE53:
  75              	.LBE52:
  22:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  76              		.loc 1 22 5 is_stmt 1
  77              	.LBB54:
  78              		.loc 1 22 40 is_stmt 0
  79 003c 930687FF 		addi	a3,a4,-8
  80              		.loc 1 22 5
  81 0040 93071000 		li	a5,1
  82 0044 63F8D702 		bleu	a3,a5,.L10
  83              	.LBE54:
  23:src/riscv.cpp ****     {
  24:src/riscv.cpp **** //         interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  27:src/riscv.cpp **** 
  28:src/riscv.cpp ****         uint64 code;
  29:src/riscv.cpp ****         __asm__ volatile("ld t1, 8*10(fp)");
  30:src/riscv.cpp ****         __asm__ volatile("mv %0, t1" : "=r" (code));
  31:src/riscv.cpp **** 
  32:src/riscv.cpp ****         if (code == MemAlloc) {
  33:src/riscv.cpp **** 
  34:src/riscv.cpp ****         }
  35:src/riscv.cpp ****         else if (code == MemFree) {
  36:src/riscv.cpp **** 
  37:src/riscv.cpp ****         }
  38:src/riscv.cpp ****         else if (code == ThreadCreate){
  39:src/riscv.cpp ****             TCB::Body start_routine;
  40:src/riscv.cpp ****             void* args = nullptr;
  41:src/riscv.cpp ****             uint64 *stack;
  42:src/riscv.cpp ****             thread_t* handle;
  43:src/riscv.cpp **** 
  44:src/riscv.cpp ****             __asm__ volatile("ld t2, 8*11(fp)");
  45:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (handle));
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*12(fp)");
  48:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (start_routine));
  49:src/riscv.cpp **** 
  50:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*13(fp)");
  51:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (args));
  52:src/riscv.cpp **** 
  53:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*14(fp)");
  54:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (stack));
  55:src/riscv.cpp **** 
GAS LISTING /tmp/cc99OXwW.s 			page 5


  56:src/riscv.cpp **** 
  57:src/riscv.cpp **** 
  58:src/riscv.cpp **** //            printString("Code = ");
  59:src/riscv.cpp **** //            printInteger(code);
  60:src/riscv.cpp **** //            printString("\n");
  61:src/riscv.cpp **** //
  62:src/riscv.cpp **** //            printString("stack = ");
  63:src/riscv.cpp **** //            printInteger(*stack);
  64:src/riscv.cpp **** //            printString("\n");
  65:src/riscv.cpp **** 
  66:src/riscv.cpp ****             TCB::createThread(handle, start_routine, args, stack);
  67:src/riscv.cpp **** //            if (handle != nullptr){
  68:src/riscv.cpp **** //                printInteger(handle);
  69:src/riscv.cpp **** //            }
  70:src/riscv.cpp **** 
  71:src/riscv.cpp ****         }
  72:src/riscv.cpp ****         else if (code == ThreadExit){
  73:src/riscv.cpp **** 
  74:src/riscv.cpp ****         }
  75:src/riscv.cpp ****         else if (code == ThreadDispatch){
  76:src/riscv.cpp **** 
  77:src/riscv.cpp ****         }
  78:src/riscv.cpp ****         else if (code == SemOpen){
  79:src/riscv.cpp **** 
  80:src/riscv.cpp ****         }
  81:src/riscv.cpp ****         else if (code == SemClose){
  82:src/riscv.cpp **** 
  83:src/riscv.cpp ****         }
  84:src/riscv.cpp ****         else if (code == SemWait){
  85:src/riscv.cpp **** 
  86:src/riscv.cpp ****         }
  87:src/riscv.cpp ****         else if (code == SemSignal){
  88:src/riscv.cpp **** 
  89:src/riscv.cpp ****         }
  90:src/riscv.cpp ****         else if (code == TimeSleep){
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****         }
  93:src/riscv.cpp ****         else if (code == GetC){
  94:src/riscv.cpp **** 
  95:src/riscv.cpp ****         }
  96:src/riscv.cpp ****         else if (code == PutC){
  97:src/riscv.cpp **** 
  98:src/riscv.cpp ****         }
  99:src/riscv.cpp ****         else {
 100:src/riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 101:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 102:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 103:src/riscv.cpp ****             TCB::dispatch();
 104:src/riscv.cpp ****             w_sstatus(sstatus);
 105:src/riscv.cpp ****             w_sepc(sepc);
 106:src/riscv.cpp ****         }
 107:src/riscv.cpp **** 
 108:src/riscv.cpp ****         w_sstatus(sstatus);
 109:src/riscv.cpp ****         w_sepc(sepc);
 110:src/riscv.cpp ****     }
 111:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
  84              		.loc 1 111 10 is_stmt 1
GAS LISTING /tmp/cc99OXwW.s 			page 6


  85              	.LBB180:
  86              	.LBB55:
  87 0048 9307F0FF 		li	a5,-1
  88 004c 9397F703 		slli	a5,a5,63
  89 0050 93871700 		addi	a5,a5,1
  90 0054 6300F714 		beq	a4,a5,.L11
 112:src/riscv.cpp ****     {
 113:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 114:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 115:src/riscv.cpp ****         TCB::timeSliceCounter++;
 116:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 117:src/riscv.cpp ****         {
 118:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 119:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 120:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 121:src/riscv.cpp ****             TCB::dispatch();
 122:src/riscv.cpp ****             w_sstatus(sstatus);
 123:src/riscv.cpp ****             w_sepc(sepc);
 124:src/riscv.cpp ****         }
 125:src/riscv.cpp ****     }
 126:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
  91              		.loc 1 126 10
  92 0058 9307F0FF 		li	a5,-1
  93 005c 9397F703 		slli	a5,a5,63
  94 0060 93879700 		addi	a5,a5,9
  95 0064 6310F712 		bne	a4,a5,.L3
 127:src/riscv.cpp ****     {
 128:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 129:src/riscv.cpp ****         console_handler();
  96              		.loc 1 129 9
  97              		.loc 1 129 24 is_stmt 0
  98 0068 97000000 		call	console_handler@plt
  98      E7800000 
  99              	.LVL1:
 100              	.LBE55:
 101              	.LBE180:
 130:src/riscv.cpp ****     }
 131:src/riscv.cpp ****     else
 132:src/riscv.cpp ****     {
 133:src/riscv.cpp ****         // unexpected trap cause
 134:src/riscv.cpp ****     }
 135:src/riscv.cpp **** }...
 102              		.loc 1 135 1
 103 0070 6F004011 		j	.L3
 104              	.LVL2:
 105              	.L10:
 106              	.LBB181:
 107              	.LBB71:
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 108              		.loc 1 25 9 is_stmt 1
 109              	.LBB72:
 110              	.LBB73:
  94:src/../h/riscv.hpp **** }
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
GAS LISTING /tmp/cc99OXwW.s 			page 7


  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile sepc;
 111              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 112              		.loc 2 104 5
 113              		.loc 2 104 64 is_stmt 0
 114              	#APP
 115              	# 104 "src/../h/riscv.hpp" 1
 105              	    return sepc;
 116              		csrr a5, sepc
 117              	# 0 "" 2
 118              	#NO_APP
 119 0078 2334F4FC 		sd	a5,-56(s0)
 120              		.loc 2 105 5 is_stmt 1
 121              		.loc 2 105 12 is_stmt 0
 122 007c 833784FC 		ld	a5,-56(s0)
 123              	.LBE73:
 124              	.LBE72:
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 125              		.loc 1 25 41
 126 0080 93874700 		addi	a5,a5,4
  25:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 127              		.loc 1 25 43
 128 0084 2334F4F8 		sd	a5,-120(s0)
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 129              		.loc 1 26 9 is_stmt 1
 130              	.LBB74:
 131              	.LBB75:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/riscv.hpp ****     return stvec;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stval;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/riscv.hpp ****     return stval;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
GAS LISTING /tmp/cc99OXwW.s 			page 8


 132:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     uint64 volatile sip;
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 151:src/../h/riscv.hpp ****     return sip;
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 132              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 133              		.loc 2 172 5
 134              		.loc 2 172 76 is_stmt 0
 135              	#APP
 136              	# 172 "src/../h/riscv.hpp" 1
 173              	    return sstatus;
 137              		csrr a5, sstatus
 138              	# 0 "" 2
 139              	#NO_APP
 140 008c 2330F4FC 		sd	a5,-64(s0)
 141              		.loc 2 173 5 is_stmt 1
 142              		.loc 2 173 12 is_stmt 0
 143 0090 833704FC 		ld	a5,-64(s0)
 144              	.LBE75:
 145              	.LBE74:
  26:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
GAS LISTING /tmp/cc99OXwW.s 			page 9


 146              		.loc 1 26 45
 147 0094 2338F4F8 		sd	a5,-112(s0)
  28:src/riscv.cpp ****         uint64 code;
 148              		.loc 1 28 9 is_stmt 1
  29:src/riscv.cpp ****         __asm__ volatile("ld t1, 8*10(fp)");
 149              		.loc 1 29 9
  29:src/riscv.cpp ****         __asm__ volatile("ld t1, 8*10(fp)");
 150              		.loc 1 29 44 is_stmt 0
 151              	#APP
 152              	# 29 "src/riscv.cpp" 1
  30:src/riscv.cpp ****         __asm__ volatile("mv %0, t1" : "=r" (code));
 153              		ld t1, 8*10(fp)
 154              	# 0 "" 2
 155              		.loc 1 30 9 is_stmt 1
  30:src/riscv.cpp ****         __asm__ volatile("mv %0, t1" : "=r" (code));
 156              		.loc 1 30 52 is_stmt 0
 157              	# 30 "src/riscv.cpp" 1
 158              		mv a5, t1
 159              	# 0 "" 2
 160              	.LVL3:
  32:src/riscv.cpp ****         if (code == MemAlloc) {
 161              		.loc 1 32 9 is_stmt 1
 162              	#NO_APP
 163              	.LBB76:
 164 00a0 13071000 		li	a4,1
 165              	.LVL4:
 166 00a4 6388E70C 		beq	a5,a4,.L5
 167              	.LBE76:
 168              	.LBE71:
 169              	.LBE181:
  35:src/riscv.cpp ****         else if (code == MemFree) {
 170              		.loc 1 35 14
 171              	.LBB182:
 172              	.LBB168:
 173              	.LBB153:
 174              	.LBB77:
 175 00a8 13072000 		li	a4,2
 176 00ac 6384E70C 		beq	a5,a4,.L5
 177              	.LBE77:
 178              	.LBE153:
 179              	.LBE168:
 180              	.LBE182:
  38:src/riscv.cpp ****         else if (code == ThreadCreate){
 181              		.loc 1 38 14
 182              	.LBB183:
 183              	.LBB169:
 184              	.LBB154:
 185              	.LBB143:
 186              	.LBB78:
 187 00b0 1307B000 		li	a4,11
 188 00b4 638CE708 		beq	a5,a4,.L12
 189              	.LBE78:
 190              	.LBE143:
 191              	.LBE154:
 192              	.LBE169:
 193              	.LBE183:
  72:src/riscv.cpp ****         else if (code == ThreadExit){
GAS LISTING /tmp/cc99OXwW.s 			page 10


 194              		.loc 1 72 14
 195              	.LBB184:
 196              	.LBB170:
 197              	.LBB155:
 198              	.LBB144:
 199              	.LBB134:
 200              	.LBB79:
 201 00b8 1307C000 		li	a4,12
 202 00bc 638CE70A 		beq	a5,a4,.L5
 203              	.LBE79:
 204              	.LBE134:
 205              	.LBE144:
 206              	.LBE155:
 207              	.LBE170:
 208              	.LBE184:
  75:src/riscv.cpp ****         else if (code == ThreadDispatch){
 209              		.loc 1 75 14
 210              	.LBB185:
 211              	.LBB171:
 212              	.LBB156:
 213              	.LBB145:
 214              	.LBB135:
 215              	.LBB125:
 216              	.LBB80:
 217 00c0 1307D000 		li	a4,13
 218 00c4 6388E70A 		beq	a5,a4,.L5
 219              	.LBE80:
 220              	.LBE125:
 221              	.LBE135:
 222              	.LBE145:
 223              	.LBE156:
 224              	.LBE171:
 225              	.LBE185:
  78:src/riscv.cpp ****         else if (code == SemOpen){
 226              		.loc 1 78 14
 227              	.LBB186:
 228              	.LBB172:
 229              	.LBB157:
 230              	.LBB146:
 231              	.LBB136:
 232              	.LBB126:
 233              	.LBB118:
 234              	.LBB81:
 235 00c8 13075001 		li	a4,21
 236 00cc 6384E70A 		beq	a5,a4,.L5
 237              	.LBE81:
 238              	.LBE118:
 239              	.LBE126:
 240              	.LBE136:
 241              	.LBE146:
 242              	.LBE157:
 243              	.LBE172:
 244              	.LBE186:
  81:src/riscv.cpp ****         else if (code == SemClose){
 245              		.loc 1 81 14
 246              	.LBB187:
 247              	.LBB173:
GAS LISTING /tmp/cc99OXwW.s 			page 11


 248              	.LBB158:
 249              	.LBB147:
 250              	.LBB137:
 251              	.LBB127:
 252              	.LBB119:
 253              	.LBB112:
 254              	.LBB82:
 255 00d0 13076001 		li	a4,22
 256 00d4 6380E70A 		beq	a5,a4,.L5
 257              	.LBE82:
 258              	.LBE112:
 259              	.LBE119:
 260              	.LBE127:
 261              	.LBE137:
 262              	.LBE147:
 263              	.LBE158:
 264              	.LBE173:
 265              	.LBE187:
  84:src/riscv.cpp ****         else if (code == SemWait){
 266              		.loc 1 84 14
 267              	.LBB188:
 268              	.LBB174:
 269              	.LBB159:
 270              	.LBB148:
 271              	.LBB138:
 272              	.LBB128:
 273              	.LBB120:
 274              	.LBB113:
 275              	.LBB107:
 276              	.LBB83:
 277 00d8 13077001 		li	a4,23
 278 00dc 638CE708 		beq	a5,a4,.L5
 279              	.LBE83:
 280              	.LBE107:
 281              	.LBE113:
 282              	.LBE120:
 283              	.LBE128:
 284              	.LBE138:
 285              	.LBE148:
 286              	.LBE159:
 287              	.LBE174:
 288              	.LBE188:
  87:src/riscv.cpp ****         else if (code == SemSignal){
 289              		.loc 1 87 14
 290              	.LBB189:
 291              	.LBB175:
 292              	.LBB160:
 293              	.LBB149:
 294              	.LBB139:
 295              	.LBB129:
 296              	.LBB121:
 297              	.LBB114:
 298              	.LBB108:
 299              	.LBB103:
 300              	.LBB84:
 301 00e0 13078001 		li	a4,24
 302 00e4 6388E708 		beq	a5,a4,.L5
GAS LISTING /tmp/cc99OXwW.s 			page 12


 303              	.LBE84:
 304              	.LBE103:
 305              	.LBE108:
 306              	.LBE114:
 307              	.LBE121:
 308              	.LBE129:
 309              	.LBE139:
 310              	.LBE149:
 311              	.LBE160:
 312              	.LBE175:
 313              	.LBE189:
  90:src/riscv.cpp ****         else if (code == TimeSleep){
 314              		.loc 1 90 14
 315              	.LBB190:
 316              	.LBB176:
 317              	.LBB161:
 318              	.LBB150:
 319              	.LBB140:
 320              	.LBB130:
 321              	.LBB122:
 322              	.LBB115:
 323              	.LBB109:
 324              	.LBB104:
 325              	.LBB100:
 326              	.LBB85:
 327 00e8 1307F001 		li	a4,31
 328 00ec 6384E708 		beq	a5,a4,.L5
 329              	.LBE85:
 330              	.LBE100:
 331              	.LBE104:
 332              	.LBE109:
 333              	.LBE115:
 334              	.LBE122:
 335              	.LBE130:
 336              	.LBE140:
 337              	.LBE150:
 338              	.LBE161:
 339              	.LBE176:
 340              	.LBE190:
  93:src/riscv.cpp ****         else if (code == GetC){
 341              		.loc 1 93 14
 342              	.LBB191:
 343              	.LBB177:
 344              	.LBB162:
 345              	.LBB151:
 346              	.LBB141:
 347              	.LBB131:
 348              	.LBB123:
 349              	.LBB116:
 350              	.LBB110:
 351              	.LBB105:
 352              	.LBB101:
 353              	.LBB98:
 354              	.LBB86:
 355 00f0 13079002 		li	a4,41
 356 00f4 6380E708 		beq	a5,a4,.L5
 357              	.LBE86:
GAS LISTING /tmp/cc99OXwW.s 			page 13


 358              	.LBE98:
 359              	.LBE101:
 360              	.LBE105:
 361              	.LBE110:
 362              	.LBE116:
 363              	.LBE123:
 364              	.LBE131:
 365              	.LBE141:
 366              	.LBE151:
 367              	.LBE162:
 368              	.LBE177:
 369              	.LBE191:
  96:src/riscv.cpp ****         else if (code == PutC){
 370              		.loc 1 96 14
 371              	.LBB192:
 372              	.LBB178:
 373              	.LBB163:
 374              	.LBB152:
 375              	.LBB142:
 376              	.LBB132:
 377              	.LBB124:
 378              	.LBB117:
 379              	.LBB111:
 380              	.LBB106:
 381              	.LBB102:
 382              	.LBB99:
 383              	.LBB97:
 384              	.LBB87:
 385 00f8 1307A002 		li	a4,42
 386 00fc 638CE706 		beq	a5,a4,.L5
 387              	.LBB88:
 100:src/riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 388              		.loc 1 100 13
 389              	.LBB89:
 390              	.LBB90:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 391              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 392              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 393              		.loc 2 104 64 is_stmt 0
 394              	#APP
 395              	# 104 "src/../h/riscv.hpp" 1
 396              		csrr a5, sepc
 397              	# 0 "" 2
 398              	.LVL5:
 399              	#NO_APP
 400 0104 233CF4FC 		sd	a5,-40(s0)
 105:src/../h/riscv.hpp **** }
 401              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
 402              		.loc 2 105 12 is_stmt 0
 403 0108 833784FD 		ld	a5,-40(s0)
 404              	.LBE90:
 405              	.LBE89:
 100:src/riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 406              		.loc 1 100 45
GAS LISTING /tmp/cc99OXwW.s 			page 14


 407 010c 93874700 		addi	a5,a5,4
 100:src/riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 408              		.loc 1 100 47
 409 0110 233CF4F8 		sd	a5,-104(s0)
 101:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 410              		.loc 1 101 13 is_stmt 1
 411              	.LBB91:
 412              	.LBB92:
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 413              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     return sstatus;
 414              		.loc 2 172 5
 172:src/../h/riscv.hpp ****     return sstatus;
 415              		.loc 2 172 76 is_stmt 0
 416              	#APP
 417              	# 172 "src/../h/riscv.hpp" 1
 418              		csrr a5, sstatus
 419              	# 0 "" 2
 420              	#NO_APP
 421 0118 2338F4FC 		sd	a5,-48(s0)
 422              		.loc 2 173 5 is_stmt 1
 423              		.loc 2 173 12 is_stmt 0
 424 011c 833704FD 		ld	a5,-48(s0)
 425              	.LBE92:
 426              	.LBE91:
 101:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 427              		.loc 1 101 49
 428 0120 2330F4FA 		sd	a5,-96(s0)
 102:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 429              		.loc 1 102 13 is_stmt 1
 102:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 430              		.loc 1 102 35 is_stmt 0
 431 0124 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 431      83B70700 
 432 012c 23B00700 		sd	zero,0(a5)
 103:src/riscv.cpp ****             TCB::dispatch();
 433              		.loc 1 103 13 is_stmt 1
 103:src/riscv.cpp ****             TCB::dispatch();
 434              		.loc 1 103 26 is_stmt 0
 435 0130 97000000 		call	_ZN3TCB8dispatchEv@plt
 435      E7800000 
 436              	.LVL6:
 104:src/riscv.cpp ****             w_sstatus(sstatus);
 437              		.loc 1 104 13 is_stmt 1
 104:src/riscv.cpp ****             w_sstatus(sstatus);
 438              		.loc 1 104 22 is_stmt 0
 439 0138 833704FA 		ld	a5,-96(s0)
 440              	.LVL7:
 441              	.LBB93:
 442              	.LBB94:
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 443              		.loc 2 178 5 is_stmt 1
 444              		.loc 2 178 77 is_stmt 0
GAS LISTING /tmp/cc99OXwW.s 			page 15


 445              	#APP
 446              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 447              		csrw sstatus, a5
 448              	# 0 "" 2
 449              	.LVL8:
 450              	#NO_APP
 451              	.LBE94:
 452              	.LBE93:
 105:src/riscv.cpp ****             w_sepc(sepc);
 453              		.loc 1 105 13 is_stmt 1
 105:src/riscv.cpp ****             w_sepc(sepc);
 454              		.loc 1 105 19 is_stmt 0
 455 0140 833784F9 		ld	a5,-104(s0)
 456              	.LVL9:
 457              	.LBB95:
 458              	.LBB96:
 110:src/../h/riscv.hpp **** }
 459              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 460              		.loc 2 110 65 is_stmt 0
 461              	#APP
 462              	# 110 "src/../h/riscv.hpp" 1
 111:src/../h/riscv.hpp **** 
 463              		csrw sepc, a5
 464              	# 0 "" 2
 465              		.loc 2 111 1
 466              	#NO_APP
 467 0148 6F00C002 		j	.L5
 468              	.LVL10:
 469              	.L12:
 470              	.LBE96:
 471              	.LBE95:
 472              	.LBE88:
 473              	.LBE87:
 474              	.LBE97:
 475              	.LBE99:
 476              	.LBE102:
 477              	.LBE106:
 478              	.LBE111:
 479              	.LBE117:
 480              	.LBE124:
 481              	.LBE132:
 482              	.LBB133:
  39:src/riscv.cpp ****             TCB::Body start_routine;
 483              		.loc 1 39 13 is_stmt 1
  40:src/riscv.cpp ****             void* args = nullptr;
 484              		.loc 1 40 13
  41:src/riscv.cpp ****             uint64 *stack;
 485              		.loc 1 41 13
  42:src/riscv.cpp ****             thread_t* handle;
 486              		.loc 1 42 13
  44:src/riscv.cpp ****             __asm__ volatile("ld t2, 8*11(fp)");
 487              		.loc 1 44 13
  44:src/riscv.cpp ****             __asm__ volatile("ld t2, 8*11(fp)");
 488              		.loc 1 44 48 is_stmt 0
 489              	#APP
GAS LISTING /tmp/cc99OXwW.s 			page 16


 490              	# 44 "src/riscv.cpp" 1
  45:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (handle));
 491              		ld t2, 8*11(fp)
 492              	# 0 "" 2
 493              		.loc 1 45 13 is_stmt 1
  45:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (handle));
 494              		.loc 1 45 58 is_stmt 0
 495              	# 45 "src/riscv.cpp" 1
 496              		mv a0, t2
 497              	# 0 "" 2
 498              	.LVL11:
  47:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*12(fp)");
 499              		.loc 1 47 13 is_stmt 1
  47:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*12(fp)");
 500              		.loc 1 47 48 is_stmt 0
 501              	# 47 "src/riscv.cpp" 1
  48:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (start_routine));
 502              		ld t1, 8*12(fp)
 503              	# 0 "" 2
 504              		.loc 1 48 13 is_stmt 1
  48:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (start_routine));
 505              		.loc 1 48 65 is_stmt 0
 506              	# 48 "src/riscv.cpp" 1
 507              		mv a1, t1
 508              	# 0 "" 2
 509              	.LVL12:
  50:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*13(fp)");
 510              		.loc 1 50 13 is_stmt 1
  50:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*13(fp)");
 511              		.loc 1 50 48 is_stmt 0
 512              	# 50 "src/riscv.cpp" 1
  51:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (args));
 513              		ld t1, 8*13(fp)
 514              	# 0 "" 2
 515              		.loc 1 51 13 is_stmt 1
  51:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (args));
 516              		.loc 1 51 56 is_stmt 0
 517              	# 51 "src/riscv.cpp" 1
 518              		mv a2, t1
 519              	# 0 "" 2
 520              	.LVL13:
  53:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*14(fp)");
 521              		.loc 1 53 13 is_stmt 1
  53:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*14(fp)");
 522              		.loc 1 53 48 is_stmt 0
 523              	# 53 "src/riscv.cpp" 1
  54:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (stack));
 524              		ld t1, 8*14(fp)
 525              	# 0 "" 2
 526              		.loc 1 54 13 is_stmt 1
  54:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (stack));
 527              		.loc 1 54 57 is_stmt 0
 528              	# 54 "src/riscv.cpp" 1
 529              		mv a3, t1
 530              	# 0 "" 2
 531              	.LVL14:
  66:src/riscv.cpp ****             TCB::createThread(handle, start_routine, args, stack);
GAS LISTING /tmp/cc99OXwW.s 			page 17


 532              		.loc 1 66 13 is_stmt 1
  66:src/riscv.cpp ****             TCB::createThread(handle, start_routine, args, stack);
 533              		.loc 1 66 30 is_stmt 0
 534              	#NO_APP
 535 016c 97000000 		call	_ZN3TCB12createThreadEPPS_PFvvEPvPm@plt
 535      E7800000 
 536              	.LVL15:
 537              	.L5:
 538              	.LBE133:
 539              	.LBE142:
 540              	.LBE152:
 541              	.LBE163:
 108:src/riscv.cpp ****         w_sstatus(sstatus);
 542              		.loc 1 108 9 is_stmt 1
 108:src/riscv.cpp ****         w_sstatus(sstatus);
 543              		.loc 1 108 18 is_stmt 0
 544 0174 833704F9 		ld	a5,-112(s0)
 545              	.LVL16:
 546              	.LBB164:
 547              	.LBB165:
 178:src/../h/riscv.hpp **** }
 548              		.loc 2 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
 549              		.loc 2 178 77 is_stmt 0
 550              	#APP
 551              	# 178 "src/../h/riscv.hpp" 1
 552              		csrw sstatus, a5
 553              	# 0 "" 2
 554              	.LVL17:
 555              	#NO_APP
 556              	.LBE165:
 557              	.LBE164:
 109:src/riscv.cpp ****         w_sepc(sepc);
 558              		.loc 1 109 9 is_stmt 1
 109:src/riscv.cpp ****         w_sepc(sepc);
 559              		.loc 1 109 15 is_stmt 0
 560 017c 833784F8 		ld	a5,-120(s0)
 561              	.LVL18:
 562              	.LBB166:
 563              	.LBB167:
 110:src/../h/riscv.hpp **** }
 564              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 565              		.loc 2 110 65 is_stmt 0
 566              	#APP
 567              	# 110 "src/../h/riscv.hpp" 1
 568              		csrw sepc, a5
 569              	# 0 "" 2
 570              	.LVL19:
 571              	#NO_APP
 572              	.L3:
 573              	.LBE167:
 574              	.LBE166:
 575              	.LBE178:
 576              	.LBE192:
 577              		.loc 1 135 1
 578 0184 83308107 		ld	ra,120(sp)
GAS LISTING /tmp/cc99OXwW.s 			page 18


 579              		.cfi_remember_state
 580              		.cfi_restore 1
 581 0188 03340107 		ld	s0,112(sp)
 582              		.cfi_restore 8
 583              		.cfi_def_cfa 2, 128
 584 018c 13010108 		addi	sp,sp,128
 585              		.cfi_def_cfa_offset 0
 586 0190 67800000 		jr	ra
 587              	.LVL20:
 588              	.L11:
 589              		.cfi_restore_state
 590              	.LBB193:
 591              	.LBB179:
 592              	.LBB56:
 114:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 593              		.loc 1 114 9 is_stmt 1
 594              	.LBB57:
 595              	.LBB58:
 144:src/../h/riscv.hpp **** }
 596              		.loc 2 144 5
 144:src/../h/riscv.hpp **** }
 597              		.loc 2 144 64 is_stmt 0
 598 0194 93072000 		li	a5,2
 599              	#APP
 600              	# 144 "src/../h/riscv.hpp" 1
 601              		csrc sip, a5
 602              	# 0 "" 2
 603              	.LVL21:
 604              	#NO_APP
 605              	.LBE58:
 606              	.LBE57:
 115:src/riscv.cpp ****         TCB::timeSliceCounter++;
 607              		.loc 1 115 9 is_stmt 1
 115:src/riscv.cpp ****         TCB::timeSliceCounter++;
 608              		.loc 1 115 30 is_stmt 0
 609 019c 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 609      03370700 
 610              	.LVL22:
 611 01a4 83370700 		ld	a5,0(a4)
 612 01a8 93871700 		addi	a5,a5,1
 613 01ac 2330F700 		sd	a5,0(a4)
 116:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 614              		.loc 1 116 9 is_stmt 1
 615              	.LBB59:
 116:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 616              		.loc 1 116 64 is_stmt 0
 617 01b0 17070000 		la	a4,_ZN3TCB7runningE
 617      03370700 
 618 01b8 03370700 		ld	a4,0(a4)
 619              	.LVL23:
 620              	.LBB60:
 621              	.LBB61:
 622              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
GAS LISTING /tmp/cc99OXwW.s 			page 19


   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** #include "../h/print.hpp"
  11:src/../h/tcb.hpp **** 
  12:src/../h/tcb.hpp **** // Thread Control Block
  13:src/../h/tcb.hpp **** class TCB
  14:src/../h/tcb.hpp **** {
  15:src/../h/tcb.hpp **** public:
  16:src/../h/tcb.hpp ****     ~TCB() {
  17:src/../h/tcb.hpp ****         delete[] stack;
  18:src/../h/tcb.hpp ****     }
  19:src/../h/tcb.hpp **** 
  20:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  21:src/../h/tcb.hpp ****     static int x;
  22:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  23:src/../h/tcb.hpp **** 
  24:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 623              		.loc 3 24 35 is_stmt 1
 624              		.loc 3 24 42 is_stmt 0
 625 01bc 03378702 		ld	a4,40(a4)
 626              	.LVL24:
 627              	.LBE61:
 628              	.LBE60:
 116:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 629              		.loc 1 116 9
 630 01c0 E3E2E7FC 		bltu	a5,a4,.L3
 631              	.LBB62:
 118:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 632              		.loc 1 118 13 is_stmt 1
 633              	.LBB63:
 634              	.LBB64:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 635              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 636              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 637              		.loc 2 104 64 is_stmt 0
 638              	#APP
 639              	# 104 "src/../h/riscv.hpp" 1
 640              		csrr a5, sepc
 641              	# 0 "" 2
 642              	#NO_APP
 643 01c8 2334F4FE 		sd	a5,-24(s0)
 105:src/../h/riscv.hpp **** }
 644              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
 645              		.loc 2 105 12 is_stmt 0
 646 01cc 833784FE 		ld	a5,-24(s0)
 647              	.LBE64:
 648              	.LBE63:
 118:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 649              		.loc 1 118 43
 650 01d0 2334F4FA 		sd	a5,-88(s0)
 119:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
GAS LISTING /tmp/cc99OXwW.s 			page 20


 651              		.loc 1 119 13 is_stmt 1
 652              	.LBB65:
 653              	.LBB66:
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 654              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     return sstatus;
 655              		.loc 2 172 5
 172:src/../h/riscv.hpp ****     return sstatus;
 656              		.loc 2 172 76 is_stmt 0
 657              	#APP
 658              	# 172 "src/../h/riscv.hpp" 1
 659              		csrr a5, sstatus
 660              	# 0 "" 2
 661              	#NO_APP
 662 01d8 2330F4FE 		sd	a5,-32(s0)
 173:src/../h/riscv.hpp **** }
 663              		.loc 2 173 5 is_stmt 1
 173:src/../h/riscv.hpp **** }
 664              		.loc 2 173 12 is_stmt 0
 665 01dc 833704FE 		ld	a5,-32(s0)
 666              	.LBE66:
 667              	.LBE65:
 119:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 668              		.loc 1 119 49
 669 01e0 2338F4FA 		sd	a5,-80(s0)
 120:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 670              		.loc 1 120 13 is_stmt 1
 120:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 671              		.loc 1 120 35 is_stmt 0
 672 01e4 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 672      83B70700 
 673 01ec 23B00700 		sd	zero,0(a5)
 121:src/riscv.cpp ****             TCB::dispatch();
 674              		.loc 1 121 13 is_stmt 1
 121:src/riscv.cpp ****             TCB::dispatch();
 675              		.loc 1 121 26 is_stmt 0
 676 01f0 97000000 		call	_ZN3TCB8dispatchEv@plt
 676      E7800000 
 677              	.LVL25:
 122:src/riscv.cpp ****             w_sstatus(sstatus);
 678              		.loc 1 122 13 is_stmt 1
 122:src/riscv.cpp ****             w_sstatus(sstatus);
 679              		.loc 1 122 22 is_stmt 0
 680 01f8 833704FB 		ld	a5,-80(s0)
 681              	.LVL26:
 682              	.LBB67:
 683              	.LBB68:
 178:src/../h/riscv.hpp **** }
 684              		.loc 2 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
 685              		.loc 2 178 77 is_stmt 0
 686              	#APP
 687              	# 178 "src/../h/riscv.hpp" 1
 688              		csrw sstatus, a5
 689              	# 0 "" 2
 690              	.LVL27:
 691              	#NO_APP
GAS LISTING /tmp/cc99OXwW.s 			page 21


 692              	.LBE68:
 693              	.LBE67:
 123:src/riscv.cpp ****             w_sepc(sepc);
 694              		.loc 1 123 13 is_stmt 1
 123:src/riscv.cpp ****             w_sepc(sepc);
 695              		.loc 1 123 19 is_stmt 0
 696 0200 833784FA 		ld	a5,-88(s0)
 697              	.LVL28:
 698              	.LBB69:
 699              	.LBB70:
 110:src/../h/riscv.hpp **** }
 700              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 701              		.loc 2 110 65 is_stmt 0
 702              	#APP
 703              	# 110 "src/../h/riscv.hpp" 1
 111:src/../h/riscv.hpp **** 
 704              		csrw sepc, a5
 705              	# 0 "" 2
 706              		.loc 2 111 1
 707              	#NO_APP
 708 0208 6FF0DFF7 		j	.L3
 709              	.LBE70:
 710              	.LBE69:
 711              	.LBE62:
 712              	.LBE59:
 713              	.LBE56:
 714              	.LBE179:
 715              	.LBE193:
 716              		.cfi_endproc
 717              	.LFE34:
 719              	.Letext0:
 720              		.file 4 "src/../h/../lib/hw.h"
 721              		.file 5 "src/../h/codes.h"
 722              		.file 6 "src/../h/syscall_c.h"
 723              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/cc99OXwW.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/cc99OXwW.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cc99OXwW.s:13     .text:0000000000000000 .L0 
     /tmp/cc99OXwW.s:14     .text:0000000000000000 .L0 
     /tmp/cc99OXwW.s:15     .text:0000000000000004 .L0 
     /tmp/cc99OXwW.s:17     .text:0000000000000008 .L0 
     /tmp/cc99OXwW.s:19     .text:000000000000000c .L0 
     /tmp/cc99OXwW.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:14     .text:000000000000000c .L0 
     /tmp/cc99OXwW.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:15     .text:0000000000000010 .L0 
     /tmp/cc99OXwW.s:33     .text:0000000000000014 .L0 
     /tmp/cc99OXwW.s:34     .text:0000000000000018 .L0 
     /tmp/cc99OXwW.s:35     .text:0000000000000018 .L0 
     /tmp/cc99OXwW.s:37     .text:000000000000001c .L0 
     /tmp/cc99OXwW.s:39     .text:0000000000000020 .L0 
     /tmp/cc99OXwW.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/cc99OXwW.s:48     .text:0000000000000020 .L0 
     /tmp/cc99OXwW.s:49     .text:0000000000000020 .L0 
     /tmp/cc99OXwW.s:50     .text:0000000000000024 .L0 
     /tmp/cc99OXwW.s:53     .text:000000000000002c .L0 
     /tmp/cc99OXwW.s:54     .text:000000000000002c .L0 
     /tmp/cc99OXwW.s:56     .text:0000000000000030 .L0 
     /tmp/cc99OXwW.s:61     .text:0000000000000030 .L0 
     /tmp/cc99OXwW.s:62     .text:0000000000000030 .L0 
     /tmp/cc99OXwW.s:63     .text:0000000000000030 .L0 
  src/../h/riscv.hpp:92     .text:0000000000000030 .L0 
     /tmp/cc99OXwW.s:71     .text:0000000000000038 .L0 
     /tmp/cc99OXwW.s:72     .text:0000000000000038 .L0 
     /tmp/cc99OXwW.s:78     .text:000000000000003c .L0 
     /tmp/cc99OXwW.s:79     .text:000000000000003c .L0 
     /tmp/cc99OXwW.s:81     .text:0000000000000040 .L0 
     /tmp/cc99OXwW.s:87     .text:0000000000000048 .L0 
     /tmp/cc99OXwW.s:92     .text:0000000000000058 .L0 
     /tmp/cc99OXwW.s:97     .text:0000000000000068 .L0 
     /tmp/cc99OXwW.s:98     .text:0000000000000068 .L0 
     /tmp/cc99OXwW.s:103    .text:0000000000000070 .L0 
     /tmp/cc99OXwW.s:111    .text:0000000000000074 .L0 
     /tmp/cc99OXwW.s:112    .text:0000000000000074 .L0 
     /tmp/cc99OXwW.s:113    .text:0000000000000074 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000074 .L0 
     /tmp/cc99OXwW.s:121    .text:000000000000007c .L0 
     /tmp/cc99OXwW.s:122    .text:000000000000007c .L0 
     /tmp/cc99OXwW.s:126    .text:0000000000000080 .L0 
     /tmp/cc99OXwW.s:128    .text:0000000000000084 .L0 
     /tmp/cc99OXwW.s:132    .text:0000000000000088 .L0 
     /tmp/cc99OXwW.s:133    .text:0000000000000088 .L0 
     /tmp/cc99OXwW.s:134    .text:0000000000000088 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000088 .L0 
     /tmp/cc99OXwW.s:142    .text:0000000000000090 .L0 
     /tmp/cc99OXwW.s:143    .text:0000000000000090 .L0 
     /tmp/cc99OXwW.s:147    .text:0000000000000094 .L0 
     /tmp/cc99OXwW.s:149    .text:0000000000000098 .L0 
     /tmp/cc99OXwW.s:150    .text:0000000000000098 .L0 
       src/riscv.cpp:29     .text:0000000000000098 .L0 
     /tmp/cc99OXwW.s:156    .text:000000000000009c .L0 
GAS LISTING /tmp/cc99OXwW.s 			page 23


       src/riscv.cpp:30     .text:000000000000009c .L0 
     /tmp/cc99OXwW.s:164    .text:00000000000000a0 .L0 
     /tmp/cc99OXwW.s:175    .text:00000000000000a8 .L0 
     /tmp/cc99OXwW.s:187    .text:00000000000000b0 .L0 
     /tmp/cc99OXwW.s:201    .text:00000000000000b8 .L0 
     /tmp/cc99OXwW.s:217    .text:00000000000000c0 .L0 
     /tmp/cc99OXwW.s:235    .text:00000000000000c8 .L0 
     /tmp/cc99OXwW.s:255    .text:00000000000000d0 .L0 
     /tmp/cc99OXwW.s:277    .text:00000000000000d8 .L0 
     /tmp/cc99OXwW.s:301    .text:00000000000000e0 .L0 
     /tmp/cc99OXwW.s:327    .text:00000000000000e8 .L0 
     /tmp/cc99OXwW.s:355    .text:00000000000000f0 .L0 
     /tmp/cc99OXwW.s:385    .text:00000000000000f8 .L0 
     /tmp/cc99OXwW.s:391    .text:0000000000000100 .L0 
     /tmp/cc99OXwW.s:392    .text:0000000000000100 .L0 
     /tmp/cc99OXwW.s:393    .text:0000000000000100 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000100 .L0 
     /tmp/cc99OXwW.s:402    .text:0000000000000108 .L0 
     /tmp/cc99OXwW.s:403    .text:0000000000000108 .L0 
     /tmp/cc99OXwW.s:407    .text:000000000000010c .L0 
     /tmp/cc99OXwW.s:409    .text:0000000000000110 .L0 
     /tmp/cc99OXwW.s:413    .text:0000000000000114 .L0 
     /tmp/cc99OXwW.s:414    .text:0000000000000114 .L0 
     /tmp/cc99OXwW.s:415    .text:0000000000000114 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000114 .L0 
     /tmp/cc99OXwW.s:423    .text:000000000000011c .L0 
     /tmp/cc99OXwW.s:424    .text:000000000000011c .L0 
     /tmp/cc99OXwW.s:428    .text:0000000000000120 .L0 
     /tmp/cc99OXwW.s:430    .text:0000000000000124 .L0 
     /tmp/cc99OXwW.s:431    .text:0000000000000124 .L0 
     /tmp/cc99OXwW.s:434    .text:0000000000000130 .L0 
     /tmp/cc99OXwW.s:435    .text:0000000000000130 .L0 
     /tmp/cc99OXwW.s:438    .text:0000000000000138 .L0 
     /tmp/cc99OXwW.s:439    .text:0000000000000138 .L0 
     /tmp/cc99OXwW.s:444    .text:000000000000013c .L0 
  src/../h/riscv.hpp:178    .text:000000000000013c .L0 
     /tmp/cc99OXwW.s:454    .text:0000000000000140 .L0 
     /tmp/cc99OXwW.s:455    .text:0000000000000140 .L0 
     /tmp/cc99OXwW.s:460    .text:0000000000000144 .L0 
  src/../h/riscv.hpp:110    .text:0000000000000144 .L0 
     /tmp/cc99OXwW.s:467    .text:0000000000000148 .L0 
     /tmp/cc99OXwW.s:484    .text:000000000000014c .L0 
     /tmp/cc99OXwW.s:485    .text:000000000000014c .L0 
     /tmp/cc99OXwW.s:486    .text:000000000000014c .L0 
     /tmp/cc99OXwW.s:487    .text:000000000000014c .L0 
     /tmp/cc99OXwW.s:488    .text:000000000000014c .L0 
       src/riscv.cpp:44     .text:000000000000014c .L0 
     /tmp/cc99OXwW.s:494    .text:0000000000000150 .L0 
       src/riscv.cpp:45     .text:0000000000000150 .L0 
     /tmp/cc99OXwW.s:500    .text:0000000000000154 .L0 
       src/riscv.cpp:47     .text:0000000000000154 .L0 
     /tmp/cc99OXwW.s:505    .text:0000000000000158 .L0 
       src/riscv.cpp:48     .text:0000000000000158 .L0 
     /tmp/cc99OXwW.s:511    .text:000000000000015c .L0 
       src/riscv.cpp:50     .text:000000000000015c .L0 
     /tmp/cc99OXwW.s:516    .text:0000000000000160 .L0 
       src/riscv.cpp:51     .text:0000000000000160 .L0 
GAS LISTING /tmp/cc99OXwW.s 			page 24


     /tmp/cc99OXwW.s:522    .text:0000000000000164 .L0 
       src/riscv.cpp:53     .text:0000000000000164 .L0 
     /tmp/cc99OXwW.s:527    .text:0000000000000168 .L0 
       src/riscv.cpp:54     .text:0000000000000168 .L0 
     /tmp/cc99OXwW.s:533    .text:000000000000016c .L0 
     /tmp/cc99OXwW.s:535    .text:000000000000016c .L0 
     /tmp/cc99OXwW.s:543    .text:0000000000000174 .L0 
     /tmp/cc99OXwW.s:544    .text:0000000000000174 .L0 
     /tmp/cc99OXwW.s:549    .text:0000000000000178 .L0 
  src/../h/riscv.hpp:178    .text:0000000000000178 .L0 
     /tmp/cc99OXwW.s:559    .text:000000000000017c .L0 
     /tmp/cc99OXwW.s:560    .text:000000000000017c .L0 
     /tmp/cc99OXwW.s:565    .text:0000000000000180 .L0 
  src/../h/riscv.hpp:110    .text:0000000000000180 .L0 
     /tmp/cc99OXwW.s:578    .text:0000000000000184 .L0 
     /tmp/cc99OXwW.s:579    .text:0000000000000188 .L0 
     /tmp/cc99OXwW.s:580    .text:0000000000000188 .L0 
     /tmp/cc99OXwW.s:582    .text:000000000000018c .L0 
     /tmp/cc99OXwW.s:583    .text:000000000000018c .L0 
     /tmp/cc99OXwW.s:585    .text:0000000000000190 .L0 
     /tmp/cc99OXwW.s:589    .text:0000000000000194 .L0 
     /tmp/cc99OXwW.s:596    .text:0000000000000194 .L0 
     /tmp/cc99OXwW.s:597    .text:0000000000000194 .L0 
     /tmp/cc99OXwW.s:598    .text:0000000000000194 .L0 
     /tmp/cc99OXwW.s:608    .text:000000000000019c .L0 
     /tmp/cc99OXwW.s:609    .text:000000000000019c .L0 
     /tmp/cc99OXwW.s:616    .text:00000000000001b0 .L0 
     /tmp/cc99OXwW.s:617    .text:00000000000001b0 .L0 
     /tmp/cc99OXwW.s:624    .text:00000000000001bc .L0 
     /tmp/cc99OXwW.s:625    .text:00000000000001bc .L0 
     /tmp/cc99OXwW.s:630    .text:00000000000001c0 .L0 
     /tmp/cc99OXwW.s:635    .text:00000000000001c4 .L0 
     /tmp/cc99OXwW.s:636    .text:00000000000001c4 .L0 
     /tmp/cc99OXwW.s:637    .text:00000000000001c4 .L0 
  src/../h/riscv.hpp:104    .text:00000000000001c4 .L0 
     /tmp/cc99OXwW.s:645    .text:00000000000001cc .L0 
     /tmp/cc99OXwW.s:646    .text:00000000000001cc .L0 
     /tmp/cc99OXwW.s:650    .text:00000000000001d0 .L0 
     /tmp/cc99OXwW.s:654    .text:00000000000001d4 .L0 
     /tmp/cc99OXwW.s:655    .text:00000000000001d4 .L0 
     /tmp/cc99OXwW.s:656    .text:00000000000001d4 .L0 
  src/../h/riscv.hpp:172    .text:00000000000001d4 .L0 
     /tmp/cc99OXwW.s:664    .text:00000000000001dc .L0 
     /tmp/cc99OXwW.s:665    .text:00000000000001dc .L0 
     /tmp/cc99OXwW.s:669    .text:00000000000001e0 .L0 
     /tmp/cc99OXwW.s:671    .text:00000000000001e4 .L0 
     /tmp/cc99OXwW.s:672    .text:00000000000001e4 .L0 
     /tmp/cc99OXwW.s:675    .text:00000000000001f0 .L0 
     /tmp/cc99OXwW.s:676    .text:00000000000001f0 .L0 
     /tmp/cc99OXwW.s:679    .text:00000000000001f8 .L0 
     /tmp/cc99OXwW.s:680    .text:00000000000001f8 .L0 
     /tmp/cc99OXwW.s:685    .text:00000000000001fc .L0 
  src/../h/riscv.hpp:178    .text:00000000000001fc .L0 
     /tmp/cc99OXwW.s:695    .text:0000000000000200 .L0 
     /tmp/cc99OXwW.s:696    .text:0000000000000200 .L0 
     /tmp/cc99OXwW.s:701    .text:0000000000000204 .L0 
  src/../h/riscv.hpp:110    .text:0000000000000204 .L0 
GAS LISTING /tmp/cc99OXwW.s 			page 25


     /tmp/cc99OXwW.s:708    .text:0000000000000208 .L0 
     /tmp/cc99OXwW.s:716    .text:000000000000020c .L0 
     /tmp/cc99OXwW.s:724    .text:000000000000020c .L0 
     /tmp/cc99OXwW.s:431    .text:0000000000000124 .L0 
     /tmp/cc99OXwW.s:609    .text:000000000000019c .L0 
     /tmp/cc99OXwW.s:617    .text:00000000000001b0 .L0 
     /tmp/cc99OXwW.s:672    .text:00000000000001e4 .L0 
     /tmp/cc99OXwW.s:105    .text:0000000000000074 .L10
     /tmp/cc99OXwW.s:588    .text:0000000000000194 .L11
     /tmp/cc99OXwW.s:572    .text:0000000000000184 .L3
     /tmp/cc99OXwW.s:537    .text:0000000000000174 .L5
     /tmp/cc99OXwW.s:469    .text:000000000000014c .L12
     /tmp/cc99OXwW.s:1851   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc99OXwW.s:3126   .debug_str:000000000000054d .LASF105
     /tmp/cc99OXwW.s:3080   .debug_str:000000000000040e .LASF106
     /tmp/cc99OXwW.s:2964   .debug_str:00000000000000e5 .LASF107
     /tmp/cc99OXwW.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc99OXwW.s:719    .text:000000000000020c .Letext0
     /tmp/cc99OXwW.s:2922   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc99OXwW.s:3052   .debug_str:000000000000038c .LASF0
     /tmp/cc99OXwW.s:3072   .debug_str:00000000000003dc .LASF1
     /tmp/cc99OXwW.s:3036   .debug_str:0000000000000317 .LASF2
     /tmp/cc99OXwW.s:3014   .debug_str:0000000000000294 .LASF4
     /tmp/cc99OXwW.s:3106   .debug_str:00000000000004ba .LASF3
     /tmp/cc99OXwW.s:2946   .debug_str:0000000000000072 .LASF5
     /tmp/cc99OXwW.s:3078   .debug_str:00000000000003fb .LASF6
     /tmp/cc99OXwW.s:3050   .debug_str:0000000000000379 .LASF7
     /tmp/cc99OXwW.s:3130   .debug_str:0000000000000620 .LASF8
     /tmp/cc99OXwW.s:3000   .debug_str:0000000000000204 .LASF9
     /tmp/cc99OXwW.s:3084   .debug_str:0000000000000427 .LASF10
     /tmp/cc99OXwW.s:3128   .debug_str:0000000000000611 .LASF11
     /tmp/cc99OXwW.s:2948   .debug_str:0000000000000079 .LASF12
     /tmp/cc99OXwW.s:2928   .debug_str:0000000000000011 .LASF13
     /tmp/cc99OXwW.s:2958   .debug_str:00000000000000cb .LASF14
     /tmp/cc99OXwW.s:3100   .debug_str:0000000000000486 .LASF15
     /tmp/cc99OXwW.s:2966   .debug_str:0000000000000108 .LASF16
     /tmp/cc99OXwW.s:3068   .debug_str:00000000000003cb .LASF56
     /tmp/cc99OXwW.s:3026   .debug_str:00000000000002dc .LASF108
     /tmp/cc99OXwW.s:3114   .debug_str:00000000000004f3 .LASF17
     /tmp/cc99OXwW.s:3066   .debug_str:00000000000003c2 .LASF18
     /tmp/cc99OXwW.s:3020   .debug_str:00000000000002a9 .LASF19
     /tmp/cc99OXwW.s:3096   .debug_str:0000000000000471 .LASF52
     /tmp/cc99OXwW.s:3144   .debug_str:000000000000068f .LASF54
     /tmp/cc99OXwW.s:2930   .debug_str:0000000000000021 .LASF20
     /tmp/cc99OXwW.s:2980   .debug_str:0000000000000178 .LASF22
     /tmp/cc99OXwW.s:2976   .debug_str:0000000000000167 .LASF24
     /tmp/cc99OXwW.s:2974   .debug_str:0000000000000152 .LASF26
     /tmp/cc99OXwW.s:3110   .debug_str:00000000000004dd .LASF21
     /tmp/cc99OXwW.s:3088   .debug_str:0000000000000445 .LASF23
     /tmp/cc99OXwW.s:3124   .debug_str:0000000000000546 .LASF25
     /tmp/cc99OXwW.s:3120   .debug_str:0000000000000521 .LASF27
     /tmp/cc99OXwW.s:2990   .debug_str:00000000000001cc .LASF28
     /tmp/cc99OXwW.s:2968   .debug_str:000000000000011e .LASF29
     /tmp/cc99OXwW.s:2926   .debug_str:0000000000000009 .LASF30
     /tmp/cc99OXwW.s:3006   .debug_str:000000000000023d .LASF31
     /tmp/cc99OXwW.s:2944   .debug_str:000000000000006a .LASF32
     /tmp/cc99OXwW.s:2950   .debug_str:0000000000000089 .LASF33
GAS LISTING /tmp/cc99OXwW.s 			page 26


     /tmp/cc99OXwW.s:3150   .debug_str:00000000000006bf .LASF34
     /tmp/cc99OXwW.s:2982   .debug_str:000000000000018d .LASF35
     /tmp/cc99OXwW.s:3054   .debug_str:0000000000000399 .LASF36
     /tmp/cc99OXwW.s:3140   .debug_str:0000000000000677 .LASF37
     /tmp/cc99OXwW.s:2938   .debug_str:000000000000003f .LASF38
     /tmp/cc99OXwW.s:2988   .debug_str:00000000000001b9 .LASF39
     /tmp/cc99OXwW.s:2994   .debug_str:00000000000001e2 .LASF40
     /tmp/cc99OXwW.s:3122   .debug_str:0000000000000534 .LASF41
     /tmp/cc99OXwW.s:2936   .debug_str:0000000000000039 .LASF42
     /tmp/cc99OXwW.s:3156   .debug_str:00000000000006e3 .LASF43
     /tmp/cc99OXwW.s:3148   .debug_str:00000000000006b4 .LASF44
     /tmp/cc99OXwW.s:3104   .debug_str:00000000000004a2 .LASF45
     /tmp/cc99OXwW.s:3070   .debug_str:00000000000003d1 .LASF46
     /tmp/cc99OXwW.s:3116   .debug_str:00000000000004fc .LASF47
     /tmp/cc99OXwW.s:2956   .debug_str:00000000000000c1 .LASF48
     /tmp/cc99OXwW.s:3010   .debug_str:0000000000000256 .LASF49
     /tmp/cc99OXwW.s:3044   .debug_str:0000000000000343 .LASF50
     /tmp/cc99OXwW.s:3002   .debug_str:0000000000000212 .LASF51
     /tmp/cc99OXwW.s:3112   .debug_str:00000000000004e4 .LASF53
     /tmp/cc99OXwW.s:2952   .debug_str:000000000000009d .LASF55
     /tmp/cc99OXwW.s:3132   .debug_str:0000000000000630 .LASF75
     /tmp/cc99OXwW.s:3024   .debug_str:00000000000002ba .LASF77
     /tmp/cc99OXwW.s:2934   .debug_str:0000000000000031 .LASF109
     /tmp/cc99OXwW.s:3008   .debug_str:0000000000000251 .LASF57
     /tmp/cc99OXwW.s:3090   .debug_str:0000000000000458 .LASF59
     /tmp/cc99OXwW.s:3082   .debug_str:000000000000041c .LASF61
     /tmp/cc99OXwW.s:2998   .debug_str:00000000000001ed .LASF63
     /tmp/cc99OXwW.s:3038   .debug_str:0000000000000325 .LASF58
     /tmp/cc99OXwW.s:3152   .debug_str:00000000000006c7 .LASF60
     /tmp/cc99OXwW.s:3030   .debug_str:00000000000002f2 .LASF62
     /tmp/cc99OXwW.s:2942   .debug_str:0000000000000051 .LASF64
     /tmp/cc99OXwW.s:3118   .debug_str:0000000000000514 .LASF65
     /tmp/cc99OXwW.s:3046   .debug_str:000000000000034d .LASF66
     /tmp/cc99OXwW.s:3094   .debug_str:000000000000046c .LASF110
     /tmp/cc99OXwW.s:3102   .debug_str:000000000000049c .LASF67
     /tmp/cc99OXwW.s:2970   .debug_str:0000000000000132 .LASF68
     /tmp/cc99OXwW.s:2978   .debug_str:0000000000000170 .LASF69
     /tmp/cc99OXwW.s:3004   .debug_str:0000000000000228 .LASF111
     /tmp/cc99OXwW.s:3018   .debug_str:00000000000002a4 .LASF70
     /tmp/cc99OXwW.s:2960   .debug_str:00000000000000d7 .LASF71
     /tmp/cc99OXwW.s:3022   .debug_str:00000000000002b2 .LASF72
     /tmp/cc99OXwW.s:3064   .debug_str:00000000000003b8 .LASF73
     /tmp/cc99OXwW.s:3016   .debug_str:000000000000029b .LASF74
     /tmp/cc99OXwW.s:3032   .debug_str:00000000000002ff .LASF76
     /tmp/cc99OXwW.s:3136   .debug_str:0000000000000653 .LASF78
     /tmp/cc99OXwW.s:3134   .debug_str:0000000000000645 .LASF112
     /tmp/cc99OXwW.s:3012   .debug_str:000000000000026c .LASF113
     /tmp/cc99OXwW.s:3056   .debug_str:00000000000003a0 .LASF79
     /tmp/cc99OXwW.s:2984   .debug_str:00000000000001a1 .LASF80
     /tmp/cc99OXwW.s:3108   .debug_str:00000000000004cc .LASF114
     /tmp/cc99OXwW.s:3028   .debug_str:00000000000002e7 .LASF81
     /tmp/cc99OXwW.s:3138   .debug_str:000000000000066c .LASF82
     /tmp/cc99OXwW.s:2986   .debug_str:00000000000001b4 .LASF83
     /tmp/cc99OXwW.s:3042   .debug_str:000000000000033a .LASF84
     /tmp/cc99OXwW.s:2954   .debug_str:00000000000000b9 .LASF85
     /tmp/cc99OXwW.s:3146   .debug_str:00000000000006a7 .LASF86
     /tmp/cc99OXwW.s:2940   .debug_str:0000000000000046 .LASF87
GAS LISTING /tmp/cc99OXwW.s 			page 27


     /tmp/cc99OXwW.s:3086   .debug_str:0000000000000436 .LASF88
     /tmp/cc99OXwW.s:3048   .debug_str:0000000000000371 .LASF89
     /tmp/cc99OXwW.s:3040   .debug_str:0000000000000331 .LASF90
     /tmp/cc99OXwW.s:2962   .debug_str:00000000000000dd .LASF91
     /tmp/cc99OXwW.s:3098   .debug_str:000000000000047c .LASF92
     /tmp/cc99OXwW.s:3034   .debug_str:000000000000030d .LASF93
     /tmp/cc99OXwW.s:3076   .debug_str:00000000000003f6 .LASF94
     /tmp/cc99OXwW.s:2996   .debug_str:00000000000001e8 .LASF95
     /tmp/cc99OXwW.s:2924   .debug_str:0000000000000000 .LASF96
     /tmp/cc99OXwW.s:46     .text:0000000000000020 .LFB34
     /tmp/cc99OXwW.s:717    .text:000000000000020c .LFE34
     /tmp/cc99OXwW.s:2932   .debug_str:000000000000002a .LASF97
     /tmp/cc99OXwW.s:2754   .debug_loc:0000000000000000 .LLST0
     /tmp/cc99OXwW.s:2894   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc99OXwW.s:3062   .debug_str:00000000000003b3 .LASF98
     /tmp/cc99OXwW.s:3092   .debug_str:0000000000000464 .LASF99
     /tmp/cc99OXwW.s:3060   .debug_str:00000000000003ae .LASF100
     /tmp/cc99OXwW.s:2787   .debug_loc:0000000000000088 .LLST4
     /tmp/cc99OXwW.s:482    .text:000000000000014c .LBB133
     /tmp/cc99OXwW.s:538    .text:0000000000000174 .LBE133
     /tmp/cc99OXwW.s:2992   .debug_str:00000000000001d4 .LASF101
     /tmp/cc99OXwW.s:2798   .debug_loc:00000000000000be .LLST7
     /tmp/cc99OXwW.s:3058   .debug_str:00000000000003a9 .LASF102
     /tmp/cc99OXwW.s:2805   .debug_loc:00000000000000e1 .LLST8
     /tmp/cc99OXwW.s:2817   .debug_loc:0000000000000118 .LLST9
     /tmp/cc99OXwW.s:3074   .debug_str:00000000000003ef .LASF103
     /tmp/cc99OXwW.s:2824   .debug_loc:000000000000013b .LLST10
     /tmp/cc99OXwW.s:536    .text:0000000000000174 .LVL15
     /tmp/cc99OXwW.s:387    .text:0000000000000100 .LBB88
     /tmp/cc99OXwW.s:472    .text:000000000000014c .LBE88
     /tmp/cc99OXwW.s:389    .text:0000000000000100 .LBB89
     /tmp/cc99OXwW.s:405    .text:000000000000010c .LBE89
     /tmp/cc99OXwW.s:411    .text:0000000000000114 .LBB91
     /tmp/cc99OXwW.s:426    .text:0000000000000120 .LBE91
     /tmp/cc99OXwW.s:441    .text:000000000000013c .LBB93
     /tmp/cc99OXwW.s:452    .text:0000000000000140 .LBE93
     /tmp/cc99OXwW.s:2831   .debug_loc:000000000000015e .LLST5
     /tmp/cc99OXwW.s:457    .text:0000000000000144 .LBB95
     /tmp/cc99OXwW.s:471    .text:000000000000014c .LBE95
     /tmp/cc99OXwW.s:2838   .debug_loc:0000000000000181 .LLST6
     /tmp/cc99OXwW.s:436    .text:0000000000000138 .LVL6
     /tmp/cc99OXwW.s:109    .text:0000000000000074 .LBB72
     /tmp/cc99OXwW.s:124    .text:0000000000000080 .LBE72
     /tmp/cc99OXwW.s:130    .text:0000000000000088 .LBB74
     /tmp/cc99OXwW.s:145    .text:0000000000000094 .LBE74
     /tmp/cc99OXwW.s:546    .text:0000000000000178 .LBB164
     /tmp/cc99OXwW.s:557    .text:000000000000017c .LBE164
     /tmp/cc99OXwW.s:2845   .debug_loc:00000000000001a4 .LLST11
     /tmp/cc99OXwW.s:562    .text:0000000000000180 .LBB166
     /tmp/cc99OXwW.s:574    .text:0000000000000184 .LBE166
     /tmp/cc99OXwW.s:2852   .debug_loc:00000000000001c7 .LLST12
     /tmp/cc99OXwW.s:631    .text:00000000000001c4 .LBB62
     /tmp/cc99OXwW.s:711    .text:000000000000020c .LBE62
     /tmp/cc99OXwW.s:633    .text:00000000000001c4 .LBB63
     /tmp/cc99OXwW.s:648    .text:00000000000001d0 .LBE63
     /tmp/cc99OXwW.s:652    .text:00000000000001d4 .LBB65
     /tmp/cc99OXwW.s:667    .text:00000000000001e0 .LBE65
GAS LISTING /tmp/cc99OXwW.s 			page 28


     /tmp/cc99OXwW.s:682    .text:00000000000001fc .LBB67
     /tmp/cc99OXwW.s:693    .text:0000000000000200 .LBE67
     /tmp/cc99OXwW.s:2859   .debug_loc:00000000000001ea .LLST3
     /tmp/cc99OXwW.s:698    .text:0000000000000204 .LBB69
     /tmp/cc99OXwW.s:710    .text:000000000000020c .LBE69
     /tmp/cc99OXwW.s:677    .text:00000000000001f8 .LVL25
     /tmp/cc99OXwW.s:58     .text:0000000000000030 .LBB52
     /tmp/cc99OXwW.s:75     .text:000000000000003c .LBE52
     /tmp/cc99OXwW.s:594    .text:0000000000000194 .LBB57
     /tmp/cc99OXwW.s:606    .text:000000000000019c .LBE57
     /tmp/cc99OXwW.s:2866   .debug_loc:000000000000020d .LLST1
     /tmp/cc99OXwW.s:620    .text:00000000000001bc .LBB60
     /tmp/cc99OXwW.s:628    .text:00000000000001c0 .LBE60
     /tmp/cc99OXwW.s:2874   .debug_loc:0000000000000231 .LLST2
     /tmp/cc99OXwW.s:99     .text:0000000000000070 .LVL1
     /tmp/cc99OXwW.s:10     .text:0000000000000000 .LFB33
     /tmp/cc99OXwW.s:40     .text:0000000000000020 .LFE33
     /tmp/cc99OXwW.s:3142   .debug_str:000000000000068a .LASF115
     /tmp/cc99OXwW.s:3154   .debug_str:00000000000006de .LASF104
     /tmp/cc99OXwW.s:2972   .debug_str:0000000000000142 .LASF116
     /tmp/cc99OXwW.s:73     .text:000000000000003c .LVL0
     /tmp/cc99OXwW.s:104    .text:0000000000000074 .LVL2
     /tmp/cc99OXwW.s:165    .text:00000000000000a4 .LVL4
     /tmp/cc99OXwW.s:468    .text:000000000000014c .LVL10
     /tmp/cc99OXwW.s:531    .text:000000000000016c .LVL14
     /tmp/cc99OXwW.s:587    .text:0000000000000194 .LVL20
     /tmp/cc99OXwW.s:610    .text:00000000000001a4 .LVL22
     /tmp/cc99OXwW.s:160    .text:00000000000000a0 .LVL3
     /tmp/cc99OXwW.s:398    .text:0000000000000104 .LVL5
     /tmp/cc99OXwW.s:509    .text:000000000000015c .LVL12
     /tmp/cc99OXwW.s:520    .text:0000000000000164 .LVL13
     /tmp/cc99OXwW.s:498    .text:0000000000000154 .LVL11
     /tmp/cc99OXwW.s:440    .text:000000000000013c .LVL7
     /tmp/cc99OXwW.s:449    .text:0000000000000140 .LVL8
     /tmp/cc99OXwW.s:456    .text:0000000000000144 .LVL9
     /tmp/cc99OXwW.s:545    .text:0000000000000178 .LVL16
     /tmp/cc99OXwW.s:554    .text:000000000000017c .LVL17
     /tmp/cc99OXwW.s:561    .text:0000000000000180 .LVL18
     /tmp/cc99OXwW.s:570    .text:0000000000000184 .LVL19
     /tmp/cc99OXwW.s:681    .text:00000000000001fc .LVL26
     /tmp/cc99OXwW.s:690    .text:0000000000000200 .LVL27
     /tmp/cc99OXwW.s:603    .text:000000000000019c .LVL21
     /tmp/cc99OXwW.s:619    .text:00000000000001bc .LVL23
     /tmp/cc99OXwW.s:626    .text:00000000000001c0 .LVL24
     /tmp/cc99OXwW.s:725    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc99OXwW.s:107    .text:0000000000000074 .LBB71
     /tmp/cc99OXwW.s:168    .text:00000000000000a8 .LBE71
     /tmp/cc99OXwW.s:172    .text:00000000000000a8 .LBB168
     /tmp/cc99OXwW.s:179    .text:00000000000000b0 .LBE168
     /tmp/cc99OXwW.s:183    .text:00000000000000b0 .LBB169
     /tmp/cc99OXwW.s:192    .text:00000000000000b8 .LBE169
     /tmp/cc99OXwW.s:196    .text:00000000000000b8 .LBB170
     /tmp/cc99OXwW.s:207    .text:00000000000000c0 .LBE170
     /tmp/cc99OXwW.s:211    .text:00000000000000c0 .LBB171
     /tmp/cc99OXwW.s:224    .text:00000000000000c8 .LBE171
     /tmp/cc99OXwW.s:228    .text:00000000000000c8 .LBB172
     /tmp/cc99OXwW.s:243    .text:00000000000000d0 .LBE172
GAS LISTING /tmp/cc99OXwW.s 			page 29


     /tmp/cc99OXwW.s:247    .text:00000000000000d0 .LBB173
     /tmp/cc99OXwW.s:264    .text:00000000000000d8 .LBE173
     /tmp/cc99OXwW.s:268    .text:00000000000000d8 .LBB174
     /tmp/cc99OXwW.s:287    .text:00000000000000e0 .LBE174
     /tmp/cc99OXwW.s:291    .text:00000000000000e0 .LBB175
     /tmp/cc99OXwW.s:312    .text:00000000000000e8 .LBE175
     /tmp/cc99OXwW.s:316    .text:00000000000000e8 .LBB176
     /tmp/cc99OXwW.s:339    .text:00000000000000f0 .LBE176
     /tmp/cc99OXwW.s:343    .text:00000000000000f0 .LBB177
     /tmp/cc99OXwW.s:368    .text:00000000000000f8 .LBE177
     /tmp/cc99OXwW.s:372    .text:00000000000000f8 .LBB178
     /tmp/cc99OXwW.s:575    .text:0000000000000184 .LBE178

UNDEFINED SYMBOLS
console_handler
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3TCB12createThreadEPPS_PFvvEPvPm
_ZN3TCB7runningE
