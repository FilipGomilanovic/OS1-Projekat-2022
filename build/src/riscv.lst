GAS LISTING /tmp/ccRzSJoQ.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   8              	_Z41__static_initialization_and_destruction_0ii:
   9              	.LFB48:
  10              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/print.hpp"
   9:src/riscv.cpp **** #include "../h/codes.h"
  10:src/riscv.cpp **** #include "../h/syscall_c.h"
  11:src/riscv.cpp **** 
  12:src/riscv.cpp **** SleepingThreadList Riscv::sleepingThreads;
  13:src/riscv.cpp **** 
  14:src/riscv.cpp **** void Riscv::popSppSpie()
  15:src/riscv.cpp **** {
  16:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  17:src/riscv.cpp ****     __asm__ volatile("sret");
  18:src/riscv.cpp **** }
  19:src/riscv.cpp **** 
  20:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  21:src/riscv.cpp **** {
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****     uint64 scause = r_scause();
  24:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  25:src/riscv.cpp ****     {
  26:src/riscv.cpp **** //         interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  27:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  28:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****         uint64 code;
  31:src/riscv.cpp ****         __asm__ volatile("ld t1, 8*10(fp)");
  32:src/riscv.cpp ****         __asm__ volatile("mv %0, t1" : "=r" (code));
  33:src/riscv.cpp **** 
  34:src/riscv.cpp ****         if (code == MemAlloc) {
  35:src/riscv.cpp **** 
  36:src/riscv.cpp ****         }
  37:src/riscv.cpp ****         else if (code == MemFree) {
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****         }
  40:src/riscv.cpp ****         else if (code == ThreadCreate){
  41:src/riscv.cpp ****             TCB::Body start_routine;
  42:src/riscv.cpp ****             void* args = nullptr;
  43:src/riscv.cpp ****             uint64 *stack;
  44:src/riscv.cpp ****             thread_t* handle;
  45:src/riscv.cpp **** 
  46:src/riscv.cpp ****             __asm__ volatile("ld t2, 8*11(fp)");
  47:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (handle));
  48:src/riscv.cpp **** 
GAS LISTING /tmp/ccRzSJoQ.s 			page 2


  49:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*12(fp)");
  50:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (start_routine));
  51:src/riscv.cpp **** 
  52:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*13(fp)");
  53:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (args));
  54:src/riscv.cpp **** 
  55:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*14(fp)");
  56:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (stack));
  57:src/riscv.cpp **** 
  58:src/riscv.cpp ****             TCB::createThread(handle, start_routine, args, stack);
  59:src/riscv.cpp **** 
  60:src/riscv.cpp ****         }
  61:src/riscv.cpp ****         else if (code == ThreadExit){
  62:src/riscv.cpp ****             TCB::running->setFinished(true);
  63:src/riscv.cpp ****             TCB::dispatch();
  64:src/riscv.cpp ****             w_sstatus(sstatus);
  65:src/riscv.cpp ****             w_sepc(sepc);
  66:src/riscv.cpp ****         }
  67:src/riscv.cpp ****         else if (code == ThreadDispatch){
  68:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  69:src/riscv.cpp ****             TCB::dispatch();
  70:src/riscv.cpp ****             w_sstatus(sstatus);
  71:src/riscv.cpp ****             w_sepc(sepc);
  72:src/riscv.cpp ****         }
  73:src/riscv.cpp ****         else if (code == SemOpen){
  74:src/riscv.cpp **** 
  75:src/riscv.cpp ****         }
  76:src/riscv.cpp ****         else if (code == SemClose){
  77:src/riscv.cpp **** 
  78:src/riscv.cpp ****         }
  79:src/riscv.cpp ****         else if (code == SemWait){
  80:src/riscv.cpp **** 
  81:src/riscv.cpp ****         }
  82:src/riscv.cpp ****         else if (code == SemSignal){
  83:src/riscv.cpp **** 
  84:src/riscv.cpp ****         }
  85:src/riscv.cpp ****         else if (code == TimeSleep){
  86:src/riscv.cpp ****             //TReba da smestim nit u sleepingThreads i da promenim kontekst, ali ne smem da je opet
  87:src/riscv.cpp ****             //NIJE IMPLEMENTIRANO BUDJENJE NITI!
  88:src/riscv.cpp **** 
  89:src/riscv.cpp ****             time_t slice;
  90:src/riscv.cpp ****             printString("Usao ovde");
  91:src/riscv.cpp ****             __asm__ volatile("ld t2, 8*11(fp)");
  92:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (slice));
  93:src/riscv.cpp ****             printString("\nSlice = ");
  94:src/riscv.cpp ****             printInteger(slice);
  95:src/riscv.cpp ****             printString("\n");
  96:src/riscv.cpp ****             if(slice != 0) {
  97:src/riscv.cpp ****                 TCB::running->setSleeping(true);
  98:src/riscv.cpp ****                 Riscv::sleepingThreads.put(TCB::running, slice);
  99:src/riscv.cpp ****             }
 100:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 101:src/riscv.cpp ****             TCB::dispatch();
 102:src/riscv.cpp **** 
 103:src/riscv.cpp ****         }
 104:src/riscv.cpp ****         else if (code == GetC){
 105:src/riscv.cpp **** 
GAS LISTING /tmp/ccRzSJoQ.s 			page 3


 106:src/riscv.cpp ****         }
 107:src/riscv.cpp ****         else if (code == PutC){
 108:src/riscv.cpp **** 
 109:src/riscv.cpp ****         }
 110:src/riscv.cpp ****         else {
 111:src/riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 112:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 113:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 114:src/riscv.cpp ****             TCB::dispatch();
 115:src/riscv.cpp ****             w_sstatus(sstatus);
 116:src/riscv.cpp ****             w_sepc(sepc);
 117:src/riscv.cpp ****         }
 118:src/riscv.cpp **** 
 119:src/riscv.cpp ****         w_sstatus(sstatus);
 120:src/riscv.cpp ****         w_sepc(sepc);
 121:src/riscv.cpp ****     }
 122:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 123:src/riscv.cpp ****     {
 124:src/riscv.cpp **** //        printString("TIMER");
 125:src/riscv.cpp **** //         interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 126:src/riscv.cpp ****         time_t temp = Riscv::sleepingThreads.peekFirstSlice();
 127:src/riscv.cpp ****         time_t t1 = -1;
 128:src/riscv.cpp **** 
 129:src/riscv.cpp ****         if (temp != t1){
 130:src/riscv.cpp **** //            printInteger(Riscv::sleepingThreads.peekFirstSlice());
 131:src/riscv.cpp **** //            printString("\n");
 132:src/riscv.cpp ****             Riscv::sleepingThreads.decFirst();
 133:src/riscv.cpp ****             if (Riscv::sleepingThreads.peekFirstSlice() == 0) {
 134:src/riscv.cpp ****                 Riscv::sleepingThreads.removeFinishedThreads();
 135:src/riscv.cpp ****             }
 136:src/riscv.cpp ****         }
 137:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 138:src/riscv.cpp ****         TCB::timeSliceCounter++;
 139:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 140:src/riscv.cpp ****         {
 141:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 142:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 143:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 144:src/riscv.cpp ****             TCB::dispatch();
 145:src/riscv.cpp ****             w_sstatus(sstatus);
 146:src/riscv.cpp ****             w_sepc(sepc);
 147:src/riscv.cpp ****         }
 148:src/riscv.cpp ****     }
 149:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 150:src/riscv.cpp ****     {
 151:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 152:src/riscv.cpp ****         console_handler();
 153:src/riscv.cpp ****     }
 154:src/riscv.cpp ****     else
 155:src/riscv.cpp ****     {
 156:src/riscv.cpp ****         // unexpected trap cause
 157:src/riscv.cpp ****     }
 158:src/riscv.cpp **** }...
  11              		.loc 1 158 1
  12              		.cfi_startproc
  13              	.LVL0:
  14 0000 130101FF 		addi	sp,sp,-16
GAS LISTING /tmp/ccRzSJoQ.s 			page 4


  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  20              		.loc 1 158 1 is_stmt 0
  21 000c 93071000 		li	a5,1
  22 0010 6308F500 		beq	a0,a5,.L4
  23              	.L1:
  24 0014 03348100 		ld	s0,8(sp)
  25              		.cfi_remember_state
  26              		.cfi_restore 8
  27              		.cfi_def_cfa 2, 16
  28 0018 13010101 		addi	sp,sp,16
  29              		.cfi_def_cfa_offset 0
  30 001c 67800000 		jr	ra
  31              	.L4:
  32              		.cfi_restore_state
  33              		.loc 1 158 1 discriminator 1
  34 0020 B7070100 		li	a5,65536
  35 0024 9387F7FF 		addi	a5,a5,-1
  36 0028 E396F5FE 		bne	a1,a5,.L1
  37              	.LVL1:
  38              	.LBB96:
  39              	.LBB97:
  40              	.LBB98:
  41              		.file 2 "src/../h/../h/sleepingThreadsList.h"
   1:src/../h/../h/sleepingThreadsList.h **** //
   2:src/../h/../h/sleepingThreadsList.h **** // Created by os on 9/6/22.
   3:src/../h/../h/sleepingThreadsList.h **** //
   4:src/../h/../h/sleepingThreadsList.h **** 
   5:src/../h/../h/sleepingThreadsList.h **** #ifndef PROJECT_BASE_V1_1_SLEEPINGTHREADSLIST_H
   6:src/../h/../h/sleepingThreadsList.h **** #define PROJECT_BASE_V1_1_SLEEPINGTHREADSLIST_H
   7:src/../h/../h/sleepingThreadsList.h **** 
   8:src/../h/../h/sleepingThreadsList.h **** #include "syscall_c.h"
   9:src/../h/../h/sleepingThreadsList.h **** #include "scheduler.hpp"
  10:src/../h/../h/sleepingThreadsList.h **** 
  11:src/../h/../h/sleepingThreadsList.h **** class SleepingThreadList
  12:src/../h/../h/sleepingThreadsList.h **** {
  13:src/../h/../h/sleepingThreadsList.h **** private:
  14:src/../h/../h/sleepingThreadsList.h ****     struct Elem
  15:src/../h/../h/sleepingThreadsList.h ****     {
  16:src/../h/../h/sleepingThreadsList.h ****         TCB *data;
  17:src/../h/../h/sleepingThreadsList.h ****         Elem *next;
  18:src/../h/../h/sleepingThreadsList.h ****         time_t relativeTime;
  19:src/../h/../h/sleepingThreadsList.h **** 
  20:src/../h/../h/sleepingThreadsList.h ****         Elem(TCB *data, Elem *next, time_t relativeTime) : data(data), next(next), relativeTime(rel
  21:src/../h/../h/sleepingThreadsList.h ****     };
  22:src/../h/../h/sleepingThreadsList.h **** 
  23:src/../h/../h/sleepingThreadsList.h ****     Elem *head, *tail;
  24:src/../h/../h/sleepingThreadsList.h **** 
  25:src/../h/../h/sleepingThreadsList.h **** public:
  26:src/../h/../h/sleepingThreadsList.h ****     SleepingThreadList() : head(nullptr), tail(nullptr) {}
  42              		.loc 2 26 55
  43 002c 97070000 		lla	a5,.LANCHOR0
  43      93870700 
  44 0034 23B00700 		sd	zero,0(a5)
GAS LISTING /tmp/ccRzSJoQ.s 			page 5


  45 0038 23B40700 		sd	zero,8(a5)
  46              	.LVL2:
  47              	.LBE98:
  48              	.LBE97:
  49              	.LBE96:
  50              		.loc 1 158 1
  51 003c 6FF09FFD 		j	.L1
  52              		.cfi_endproc
  53              	.LFE48:
  55              		.align	2
  56              		.globl	_ZN5Riscv10popSppSpieEv
  58              	_ZN5Riscv10popSppSpieEv:
  59              	.LFB46:
  15:src/riscv.cpp **** {
  60              		.loc 1 15 1 is_stmt 1
  61              		.cfi_startproc
  62 0040 130101FF 		addi	sp,sp,-16
  63              		.cfi_def_cfa_offset 16
  64 0044 23348100 		sd	s0,8(sp)
  65              		.cfi_offset 8, -8
  66 0048 13040101 		addi	s0,sp,16
  67              		.cfi_def_cfa 8, 0
  16:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  68              		.loc 1 16 5
  16:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  69              		.loc 1 16 38 is_stmt 0
  70              	#APP
  71              	# 16 "src/riscv.cpp" 1
  17:src/riscv.cpp ****     __asm__ volatile("sret");
  72              		csrw sepc, ra
  73              	# 0 "" 2
  74              		.loc 1 17 5 is_stmt 1
  17:src/riscv.cpp ****     __asm__ volatile("sret");
  75              		.loc 1 17 29 is_stmt 0
  76              	# 17 "src/riscv.cpp" 1
  18:src/riscv.cpp **** }
  77              		sret
  78              	# 0 "" 2
  79              		.loc 1 18 1
  80              	#NO_APP
  81 0054 03348100 		ld	s0,8(sp)
  82              		.cfi_restore 8
  83              		.cfi_def_cfa 2, 16
  84 0058 13010101 		addi	sp,sp,16
  85              		.cfi_def_cfa_offset 0
  86 005c 67800000 		jr	ra
  87              		.cfi_endproc
  88              	.LFE46:
  90              		.section	.rodata.str1.8,"aMS",@progbits,1
  91              		.align	3
  92              	.LC0:
  93 0000 5573616F 		.string	"Usao ovde"
  93      206F7664 
  93      6500
  94 000a 00000000 		.align	3
  94      0000
  95              	.LC1:
GAS LISTING /tmp/ccRzSJoQ.s 			page 6


  96 0010 0A536C69 		.string	"\nSlice = "
  96      6365203D 
  96      2000
  97 001a 00000000 		.align	3
  97      0000
  98              	.LC2:
  99 0020 0A00     		.string	"\n"
 100              		.text
 101              		.align	2
 102              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 104              	_ZN5Riscv20handleSupervisorTrapEv:
 105              	.LFB47:
  21:src/riscv.cpp **** {
 106              		.loc 1 21 1 is_stmt 1
 107              		.cfi_startproc
 108 0060 130101F6 		addi	sp,sp,-160
 109              		.cfi_def_cfa_offset 160
 110 0064 233C1108 		sd	ra,152(sp)
 111 0068 23388108 		sd	s0,144(sp)
 112 006c 23349108 		sd	s1,136(sp)
 113 0070 23302109 		sd	s2,128(sp)
 114 0074 233C3107 		sd	s3,120(sp)
 115 0078 23384107 		sd	s4,112(sp)
 116              		.cfi_offset 1, -8
 117              		.cfi_offset 8, -16
 118              		.cfi_offset 9, -24
 119              		.cfi_offset 18, -32
 120              		.cfi_offset 19, -40
 121              		.cfi_offset 20, -48
 122 007c 1304010A 		addi	s0,sp,160
 123              		.cfi_def_cfa 8, 0
  23:src/riscv.cpp ****     uint64 scause = r_scause();
 124              		.loc 1 23 5
 125              	.LBB192:
 126              	.LBB193:
 127              		.file 3 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "tcb.hpp"
  10:src/../h/riscv.hpp **** #include "../h/sleepingThreadsList.h"
  11:src/../h/riscv.hpp **** 
  12:src/../h/riscv.hpp **** class Riscv
  13:src/../h/riscv.hpp **** {
  14:src/../h/riscv.hpp **** public:
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  17:src/../h/riscv.hpp ****     static void popSppSpie();
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // read register scause
  20:src/../h/riscv.hpp ****     static uint64 r_scause();
  21:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccRzSJoQ.s 			page 7


  22:src/../h/riscv.hpp ****     // write register scause
  23:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // read register sepc
  26:src/../h/riscv.hpp ****     static uint64 r_sepc();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // write register sepc
  29:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // read register stvec
  32:src/../h/riscv.hpp ****     static uint64 r_stvec();
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // write register stvec
  35:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // read register stval
  38:src/../h/riscv.hpp ****     static uint64 r_stval();
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // write register stval
  41:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     enum BitMaskSip
  44:src/../h/riscv.hpp ****     {
  45:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  46:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  47:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  48:src/../h/riscv.hpp ****     };
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // mask set register sip
  51:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // mask clear register sip
  54:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // read register sip
  57:src/../h/riscv.hpp ****     static uint64 r_sip();
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // write register sip
  60:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     enum BitMaskSstatus
  63:src/../h/riscv.hpp ****     {
  64:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  65:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  66:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  67:src/../h/riscv.hpp ****     };
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // mask set register sstatus
  70:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // mask clear register sstatus
  73:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // read register sstatus
  76:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // write register sstatus
GAS LISTING /tmp/ccRzSJoQ.s 			page 8


  79:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // supervisor trap
  82:src/../h/riscv.hpp ****     static void supervisorTrap();
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp **** private:
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     // supervisor trap handler
  87:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp ****     static SleepingThreadList sleepingThreads;
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp **** };
  92:src/../h/riscv.hpp **** 
  93:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  94:src/../h/riscv.hpp **** {
  95:src/../h/riscv.hpp ****     uint64 volatile scause;
 128              		.loc 3 95 5
  96:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 129              		.loc 3 96 5
 130              		.loc 3 96 72 is_stmt 0
 131              	#APP
 132              	# 96 "src/../h/riscv.hpp" 1
  97              	    return scause;
 133              		csrr a5, scause
 134              	# 0 "" 2
 135              	#NO_APP
 136 0084 233CF4F8 		sd	a5,-104(s0)
 137              		.loc 3 97 5 is_stmt 1
 138              		.loc 3 97 12 is_stmt 0
 139 0088 033784F9 		ld	a4,-104(s0)
 140              	.LVL3:
 141              	.LBE193:
 142              	.LBE192:
  24:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 143              		.loc 1 24 5 is_stmt 1
 144              	.LBB194:
  24:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 145              		.loc 1 24 40 is_stmt 0
 146 008c 930687FF 		addi	a3,a4,-8
  24:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 147              		.loc 1 24 5
 148 0090 93071000 		li	a5,1
 149 0094 63F8D702 		bleu	a3,a5,.L31
 150              	.LBE194:
 122:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 151              		.loc 1 122 10 is_stmt 1
 152              	.LBB392:
 153              	.LBB195:
 154 0098 9307F0FF 		li	a5,-1
 155 009c 9397F703 		slli	a5,a5,63
 156 00a0 93871700 		addi	a5,a5,1
 157 00a4 6300F734 		beq	a4,a5,.L32
 149:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 158              		.loc 1 149 10
 159 00a8 9307F0FF 		li	a5,-1
 160 00ac 9397F703 		slli	a5,a5,63
GAS LISTING /tmp/ccRzSJoQ.s 			page 9


 161 00b0 93879700 		addi	a5,a5,9
 162 00b4 6310F712 		bne	a4,a5,.L7
 152:src/riscv.cpp ****         console_handler();
 163              		.loc 1 152 9
 152:src/riscv.cpp ****         console_handler();
 164              		.loc 1 152 24 is_stmt 0
 165 00b8 97000000 		call	console_handler@plt
 165      E7800000 
 166              	.LVL4:
 167              	.LBE195:
 168              	.LBE392:
 169              		.loc 1 158 1
 170 00c0 6F004011 		j	.L7
 171              	.LVL5:
 172              	.L31:
 173              	.LBB393:
 174              	.LBB222:
  27:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 175              		.loc 1 27 9 is_stmt 1
 176              	.LBB223:
 177              	.LBB224:
  98:src/../h/riscv.hpp **** }
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 101:src/../h/riscv.hpp **** {
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 103:src/../h/riscv.hpp **** }
 104:src/../h/riscv.hpp **** 
 105:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 106:src/../h/riscv.hpp **** {
 107:src/../h/riscv.hpp ****     uint64 volatile sepc;
 178              		.loc 3 107 5
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 179              		.loc 3 108 5
 180              		.loc 3 108 64 is_stmt 0
 181              	#APP
 182              	# 108 "src/../h/riscv.hpp" 1
 109              	    return sepc;
 183              		csrr a5, sepc
 184              	# 0 "" 2
 185              	#NO_APP
 186 00c8 2334F4FA 		sd	a5,-88(s0)
 187              		.loc 3 109 5 is_stmt 1
 188              		.loc 3 109 12 is_stmt 0
 189 00cc 833784FA 		ld	a5,-88(s0)
 190              	.LBE224:
 191              	.LBE223:
  27:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 192              		.loc 1 27 41
 193 00d0 93874700 		addi	a5,a5,4
  27:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 194              		.loc 1 27 43
 195 00d4 2334F4F6 		sd	a5,-152(s0)
  28:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 196              		.loc 1 28 9 is_stmt 1
 197              	.LBB225:
 198              	.LBB226:
GAS LISTING /tmp/ccRzSJoQ.s 			page 10


 110:src/../h/riscv.hpp **** }
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 113:src/../h/riscv.hpp **** {
 114:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 115:src/../h/riscv.hpp **** }
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     uint64 volatile stvec;
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 121:src/../h/riscv.hpp ****     return stvec;
 122:src/../h/riscv.hpp **** }
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     uint64 volatile stval;
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 133:src/../h/riscv.hpp ****     return stval;
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 139:src/../h/riscv.hpp **** }
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 142:src/../h/riscv.hpp **** {
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 144:src/../h/riscv.hpp **** }
 145:src/../h/riscv.hpp **** 
 146:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 147:src/../h/riscv.hpp **** {
 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     uint64 volatile sip;
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 155:src/../h/riscv.hpp ****     return sip;
 156:src/../h/riscv.hpp **** }
 157:src/../h/riscv.hpp **** 
 158:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 159:src/../h/riscv.hpp **** {
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 161:src/../h/riscv.hpp **** }
 162:src/../h/riscv.hpp **** 
 163:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 164:src/../h/riscv.hpp **** {
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 166:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccRzSJoQ.s 			page 11


 167:src/../h/riscv.hpp **** 
 168:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 169:src/../h/riscv.hpp **** {
 170:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 171:src/../h/riscv.hpp **** }
 172:src/../h/riscv.hpp **** 
 173:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 174:src/../h/riscv.hpp **** {
 175:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 199              		.loc 3 175 5
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 200              		.loc 3 176 5
 201              		.loc 3 176 76 is_stmt 0
 202              	#APP
 203              	# 176 "src/../h/riscv.hpp" 1
 177              	    return sstatus;
 204              		csrr a5, sstatus
 205              	# 0 "" 2
 206              	#NO_APP
 207 00dc 2330F4FA 		sd	a5,-96(s0)
 208              		.loc 3 177 5 is_stmt 1
 209              		.loc 3 177 12 is_stmt 0
 210 00e0 833704FA 		ld	a5,-96(s0)
 211              	.LBE226:
 212              	.LBE225:
  28:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 213              		.loc 1 28 45
 214 00e4 2338F4F6 		sd	a5,-144(s0)
  30:src/riscv.cpp ****         uint64 code;
 215              		.loc 1 30 9 is_stmt 1
  31:src/riscv.cpp ****         __asm__ volatile("ld t1, 8*10(fp)");
 216              		.loc 1 31 9
  31:src/riscv.cpp ****         __asm__ volatile("ld t1, 8*10(fp)");
 217              		.loc 1 31 44 is_stmt 0
 218              	#APP
 219              	# 31 "src/riscv.cpp" 1
  32:src/riscv.cpp ****         __asm__ volatile("mv %0, t1" : "=r" (code));
 220              		ld t1, 8*10(fp)
 221              	# 0 "" 2
 222              		.loc 1 32 9 is_stmt 1
  32:src/riscv.cpp ****         __asm__ volatile("mv %0, t1" : "=r" (code));
 223              		.loc 1 32 52 is_stmt 0
 224              	# 32 "src/riscv.cpp" 1
 225              		mv a5, t1
 226              	# 0 "" 2
 227              	.LVL6:
  34:src/riscv.cpp ****         if (code == MemAlloc) {
 228              		.loc 1 34 9 is_stmt 1
 229              	#NO_APP
 230              	.LBB227:
 231 00f0 13071000 		li	a4,1
 232              	.LVL7:
 233 00f4 6388E70C 		beq	a5,a4,.L9
 234              	.LBE227:
 235              	.LBE222:
 236              	.LBE393:
  37:src/riscv.cpp ****         else if (code == MemFree) {
GAS LISTING /tmp/ccRzSJoQ.s 			page 12


 237              		.loc 1 37 14
 238              	.LBB394:
 239              	.LBB377:
 240              	.LBB360:
 241              	.LBB228:
 242 00f8 13072000 		li	a4,2
 243 00fc 6384E70C 		beq	a5,a4,.L9
 244              	.LBE228:
 245              	.LBE360:
 246              	.LBE377:
 247              	.LBE394:
  40:src/riscv.cpp ****         else if (code == ThreadCreate){
 248              		.loc 1 40 14
 249              	.LBB395:
 250              	.LBB378:
 251              	.LBB361:
 252              	.LBB348:
 253              	.LBB229:
 254 0100 1307B000 		li	a4,11
 255 0104 638CE708 		beq	a5,a4,.L33
 256              	.LBE229:
 257              	.LBE348:
 258              	.LBE361:
 259              	.LBE378:
 260              	.LBE395:
  61:src/riscv.cpp ****         else if (code == ThreadExit){
 261              		.loc 1 61 14
 262              	.LBB396:
 263              	.LBB379:
 264              	.LBB362:
 265              	.LBB349:
 266              	.LBB337:
 267              	.LBB230:
 268 0108 1307C000 		li	a4,12
 269 010c 6384E70E 		beq	a5,a4,.L34
 270              	.LBE230:
 271              	.LBE337:
 272              	.LBE349:
 273              	.LBE362:
 274              	.LBE379:
 275              	.LBE396:
  67:src/riscv.cpp ****         else if (code == ThreadDispatch){
 276              		.loc 1 67 14
 277              	.LBB397:
 278              	.LBB380:
 279              	.LBB363:
 280              	.LBB350:
 281              	.LBB338:
 282              	.LBB326:
 283              	.LBB231:
 284 0110 1307D000 		li	a4,13
 285 0114 6388E710 		beq	a5,a4,.L35
 286              	.LBE231:
 287              	.LBE326:
 288              	.LBE338:
 289              	.LBE350:
 290              	.LBE363:
GAS LISTING /tmp/ccRzSJoQ.s 			page 13


 291              	.LBE380:
 292              	.LBE397:
  73:src/riscv.cpp ****         else if (code == SemOpen){
 293              		.loc 1 73 14
 294              	.LBB398:
 295              	.LBB381:
 296              	.LBB364:
 297              	.LBB351:
 298              	.LBB339:
 299              	.LBB327:
 300              	.LBB311:
 301              	.LBB232:
 302 0118 13075001 		li	a4,21
 303 011c 6384E70A 		beq	a5,a4,.L9
 304              	.LBE232:
 305              	.LBE311:
 306              	.LBE327:
 307              	.LBE339:
 308              	.LBE351:
 309              	.LBE364:
 310              	.LBE381:
 311              	.LBE398:
  76:src/riscv.cpp ****         else if (code == SemClose){
 312              		.loc 1 76 14
 313              	.LBB399:
 314              	.LBB382:
 315              	.LBB365:
 316              	.LBB352:
 317              	.LBB340:
 318              	.LBB328:
 319              	.LBB312:
 320              	.LBB299:
 321              	.LBB233:
 322 0120 13076001 		li	a4,22
 323 0124 6380E70A 		beq	a5,a4,.L9
 324              	.LBE233:
 325              	.LBE299:
 326              	.LBE312:
 327              	.LBE328:
 328              	.LBE340:
 329              	.LBE352:
 330              	.LBE365:
 331              	.LBE382:
 332              	.LBE399:
  79:src/riscv.cpp ****         else if (code == SemWait){
 333              		.loc 1 79 14
 334              	.LBB400:
 335              	.LBB383:
 336              	.LBB366:
 337              	.LBB353:
 338              	.LBB341:
 339              	.LBB329:
 340              	.LBB313:
 341              	.LBB300:
 342              	.LBB292:
 343              	.LBB234:
 344 0128 13077001 		li	a4,23
GAS LISTING /tmp/ccRzSJoQ.s 			page 14


 345 012c 638CE708 		beq	a5,a4,.L9
 346              	.LBE234:
 347              	.LBE292:
 348              	.LBE300:
 349              	.LBE313:
 350              	.LBE329:
 351              	.LBE341:
 352              	.LBE353:
 353              	.LBE366:
 354              	.LBE383:
 355              	.LBE400:
  82:src/riscv.cpp ****         else if (code == SemSignal){
 356              		.loc 1 82 14
 357              	.LBB401:
 358              	.LBB384:
 359              	.LBB367:
 360              	.LBB354:
 361              	.LBB342:
 362              	.LBB330:
 363              	.LBB314:
 364              	.LBB301:
 365              	.LBB293:
 366              	.LBB286:
 367              	.LBB235:
 368 0130 13078001 		li	a4,24
 369 0134 6388E708 		beq	a5,a4,.L9
 370              	.LBE235:
 371              	.LBE286:
 372              	.LBE293:
 373              	.LBE301:
 374              	.LBE314:
 375              	.LBE330:
 376              	.LBE342:
 377              	.LBE354:
 378              	.LBE367:
 379              	.LBE384:
 380              	.LBE401:
  85:src/riscv.cpp ****         else if (code == TimeSleep){
 381              		.loc 1 85 14
 382              	.LBB402:
 383              	.LBB385:
 384              	.LBB368:
 385              	.LBB355:
 386              	.LBB343:
 387              	.LBB331:
 388              	.LBB315:
 389              	.LBB302:
 390              	.LBB294:
 391              	.LBB287:
 392              	.LBB281:
 393              	.LBB236:
 394 0138 1307F001 		li	a4,31
 395 013c 6388E710 		beq	a5,a4,.L36
 396              	.LBE236:
 397              	.LBE281:
 398              	.LBE287:
 399              	.LBE294:
GAS LISTING /tmp/ccRzSJoQ.s 			page 15


 400              	.LBE302:
 401              	.LBE315:
 402              	.LBE331:
 403              	.LBE343:
 404              	.LBE355:
 405              	.LBE368:
 406              	.LBE385:
 407              	.LBE402:
 104:src/riscv.cpp ****         else if (code == GetC){
 408              		.loc 1 104 14
 409              	.LBB403:
 410              	.LBB386:
 411              	.LBB369:
 412              	.LBB356:
 413              	.LBB344:
 414              	.LBB332:
 415              	.LBB316:
 416              	.LBB303:
 417              	.LBB295:
 418              	.LBB288:
 419              	.LBB282:
 420              	.LBB277:
 421              	.LBB237:
 422 0140 13079002 		li	a4,41
 423 0144 6380E708 		beq	a5,a4,.L9
 424              	.LBE237:
 425              	.LBE277:
 426              	.LBE282:
 427              	.LBE288:
 428              	.LBE295:
 429              	.LBE303:
 430              	.LBE316:
 431              	.LBE332:
 432              	.LBE344:
 433              	.LBE356:
 434              	.LBE369:
 435              	.LBE386:
 436              	.LBE403:
 107:src/riscv.cpp ****         else if (code == PutC){
 437              		.loc 1 107 14
 438              	.LBB404:
 439              	.LBB387:
 440              	.LBB370:
 441              	.LBB357:
 442              	.LBB345:
 443              	.LBB333:
 444              	.LBB317:
 445              	.LBB304:
 446              	.LBB296:
 447              	.LBB289:
 448              	.LBB283:
 449              	.LBB278:
 450              	.LBB248:
 451              	.LBB238:
 452 0148 1307A002 		li	a4,42
 453 014c 638CE706 		beq	a5,a4,.L9
 454              	.LBB239:
GAS LISTING /tmp/ccRzSJoQ.s 			page 16


 111:src/riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 455              		.loc 1 111 13
 456              	.LBB240:
 457              	.LBB241:
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 458              		.loc 3 107 5
 108:src/../h/riscv.hpp ****     return sepc;
 459              		.loc 3 108 5
 108:src/../h/riscv.hpp ****     return sepc;
 460              		.loc 3 108 64 is_stmt 0
 461              	#APP
 462              	# 108 "src/../h/riscv.hpp" 1
 463              		csrr a5, sepc
 464              	# 0 "" 2
 465              	.LVL8:
 466              	#NO_APP
 467 0154 233CF4FA 		sd	a5,-72(s0)
 109:src/../h/riscv.hpp **** }
 468              		.loc 3 109 5 is_stmt 1
 109:src/../h/riscv.hpp **** }
 469              		.loc 3 109 12 is_stmt 0
 470 0158 833784FB 		ld	a5,-72(s0)
 471              	.LBE241:
 472              	.LBE240:
 111:src/riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 473              		.loc 1 111 45
 474 015c 93874700 		addi	a5,a5,4
 111:src/riscv.cpp ****             uint64 volatile sepc = r_sepc() + 4;
 475              		.loc 1 111 47
 476 0160 233CF4F6 		sd	a5,-136(s0)
 112:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 477              		.loc 1 112 13 is_stmt 1
 478              	.LBB242:
 479              	.LBB243:
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 480              		.loc 3 175 5
 176:src/../h/riscv.hpp ****     return sstatus;
 481              		.loc 3 176 5
 176:src/../h/riscv.hpp ****     return sstatus;
 482              		.loc 3 176 76 is_stmt 0
 483              	#APP
 484              	# 176 "src/../h/riscv.hpp" 1
 485              		csrr a5, sstatus
 486              	# 0 "" 2
 487              	#NO_APP
 488 0168 2338F4FA 		sd	a5,-80(s0)
 489              		.loc 3 177 5 is_stmt 1
 490              		.loc 3 177 12 is_stmt 0
 491 016c 833704FB 		ld	a5,-80(s0)
 492              	.LBE243:
 493              	.LBE242:
 112:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 494              		.loc 1 112 49
 495 0170 2330F4F8 		sd	a5,-128(s0)
 113:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 496              		.loc 1 113 13 is_stmt 1
 113:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
GAS LISTING /tmp/ccRzSJoQ.s 			page 17


 497              		.loc 1 113 35 is_stmt 0
 498 0174 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 498      83B70700 
 499 017c 23B00700 		sd	zero,0(a5)
 114:src/riscv.cpp ****             TCB::dispatch();
 500              		.loc 1 114 13 is_stmt 1
 114:src/riscv.cpp ****             TCB::dispatch();
 501              		.loc 1 114 26 is_stmt 0
 502 0180 97000000 		call	_ZN3TCB8dispatchEv@plt
 502      E7800000 
 503              	.LVL9:
 115:src/riscv.cpp ****             w_sstatus(sstatus);
 504              		.loc 1 115 13 is_stmt 1
 115:src/riscv.cpp ****             w_sstatus(sstatus);
 505              		.loc 1 115 22 is_stmt 0
 506 0188 833704F8 		ld	a5,-128(s0)
 507              	.LVL10:
 508              	.LBB244:
 509              	.LBB245:
 178:src/../h/riscv.hpp **** }
 179:src/../h/riscv.hpp **** 
 180:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 181:src/../h/riscv.hpp **** {
 182:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 510              		.loc 3 182 5 is_stmt 1
 511              		.loc 3 182 77 is_stmt 0
 512              	#APP
 513              	# 182 "src/../h/riscv.hpp" 1
 183              	}
 514              		csrw sstatus, a5
 515              	# 0 "" 2
 516              	.LVL11:
 517              	#NO_APP
 518              	.LBE245:
 519              	.LBE244:
 116:src/riscv.cpp ****             w_sepc(sepc);
 520              		.loc 1 116 13 is_stmt 1
 116:src/riscv.cpp ****             w_sepc(sepc);
 521              		.loc 1 116 19 is_stmt 0
 522 0190 833784F7 		ld	a5,-136(s0)
 523              	.LVL12:
 524              	.LBB246:
 525              	.LBB247:
 114:src/../h/riscv.hpp **** }
 526              		.loc 3 114 5 is_stmt 1
 114:src/../h/riscv.hpp **** }
 527              		.loc 3 114 65 is_stmt 0
 528              	#APP
 529              	# 114 "src/../h/riscv.hpp" 1
 115:src/../h/riscv.hpp **** 
 530              		csrw sepc, a5
 531              	# 0 "" 2
 532              		.loc 3 115 1
 533              	#NO_APP
 534 0198 6F00C002 		j	.L9
 535              	.LVL13:
 536              	.L33:
GAS LISTING /tmp/ccRzSJoQ.s 			page 18


 537              	.LBE247:
 538              	.LBE246:
 539              	.LBE239:
 540              	.LBE238:
 541              	.LBE248:
 542              	.LBE278:
 543              	.LBE283:
 544              	.LBE289:
 545              	.LBE296:
 546              	.LBE304:
 547              	.LBE317:
 548              	.LBE333:
 549              	.LBB334:
  41:src/riscv.cpp ****             TCB::Body start_routine;
 550              		.loc 1 41 13 is_stmt 1
  42:src/riscv.cpp ****             void* args = nullptr;
 551              		.loc 1 42 13
  43:src/riscv.cpp ****             uint64 *stack;
 552              		.loc 1 43 13
  44:src/riscv.cpp ****             thread_t* handle;
 553              		.loc 1 44 13
  46:src/riscv.cpp ****             __asm__ volatile("ld t2, 8*11(fp)");
 554              		.loc 1 46 13
  46:src/riscv.cpp ****             __asm__ volatile("ld t2, 8*11(fp)");
 555              		.loc 1 46 48 is_stmt 0
 556              	#APP
 557              	# 46 "src/riscv.cpp" 1
  47:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (handle));
 558              		ld t2, 8*11(fp)
 559              	# 0 "" 2
 560              		.loc 1 47 13 is_stmt 1
  47:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (handle));
 561              		.loc 1 47 58 is_stmt 0
 562              	# 47 "src/riscv.cpp" 1
 563              		mv a0, t2
 564              	# 0 "" 2
 565              	.LVL14:
  49:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*12(fp)");
 566              		.loc 1 49 13 is_stmt 1
  49:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*12(fp)");
 567              		.loc 1 49 48 is_stmt 0
 568              	# 49 "src/riscv.cpp" 1
  50:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (start_routine));
 569              		ld t1, 8*12(fp)
 570              	# 0 "" 2
 571              		.loc 1 50 13 is_stmt 1
  50:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (start_routine));
 572              		.loc 1 50 65 is_stmt 0
 573              	# 50 "src/riscv.cpp" 1
 574              		mv a1, t1
 575              	# 0 "" 2
 576              	.LVL15:
  52:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*13(fp)");
 577              		.loc 1 52 13 is_stmt 1
  52:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*13(fp)");
 578              		.loc 1 52 48 is_stmt 0
 579              	# 52 "src/riscv.cpp" 1
GAS LISTING /tmp/ccRzSJoQ.s 			page 19


  53:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (args));
 580              		ld t1, 8*13(fp)
 581              	# 0 "" 2
 582              		.loc 1 53 13 is_stmt 1
  53:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (args));
 583              		.loc 1 53 56 is_stmt 0
 584              	# 53 "src/riscv.cpp" 1
 585              		mv a2, t1
 586              	# 0 "" 2
 587              	.LVL16:
  55:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*14(fp)");
 588              		.loc 1 55 13 is_stmt 1
  55:src/riscv.cpp ****             __asm__ volatile("ld t1, 8*14(fp)");
 589              		.loc 1 55 48 is_stmt 0
 590              	# 55 "src/riscv.cpp" 1
  56:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (stack));
 591              		ld t1, 8*14(fp)
 592              	# 0 "" 2
 593              		.loc 1 56 13 is_stmt 1
  56:src/riscv.cpp ****             __asm__ volatile("mv %0, t1" : "=r" (stack));
 594              		.loc 1 56 57 is_stmt 0
 595              	# 56 "src/riscv.cpp" 1
 596              		mv a3, t1
 597              	# 0 "" 2
 598              	.LVL17:
  58:src/riscv.cpp ****             TCB::createThread(handle, start_routine, args, stack);
 599              		.loc 1 58 13 is_stmt 1
  58:src/riscv.cpp ****             TCB::createThread(handle, start_routine, args, stack);
 600              		.loc 1 58 30 is_stmt 0
 601              	#NO_APP
 602 01bc 97000000 		call	_ZN3TCB12createThreadEPPS_PFvvEPvPm@plt
 602      E7800000 
 603              	.LVL18:
 604              	.L9:
 605              	.LBE334:
 606              	.LBE345:
 607              	.LBE357:
 608              	.LBE370:
 119:src/riscv.cpp ****         w_sstatus(sstatus);
 609              		.loc 1 119 9 is_stmt 1
 119:src/riscv.cpp ****         w_sstatus(sstatus);
 610              		.loc 1 119 18 is_stmt 0
 611 01c4 833704F7 		ld	a5,-144(s0)
 612              	.LVL19:
 613              	.LBB371:
 614              	.LBB372:
 182:src/../h/riscv.hpp **** }
 615              		.loc 3 182 5 is_stmt 1
 182:src/../h/riscv.hpp **** }
 616              		.loc 3 182 77 is_stmt 0
 617              	#APP
 618              	# 182 "src/../h/riscv.hpp" 1
 619              		csrw sstatus, a5
 620              	# 0 "" 2
 621              	.LVL20:
 622              	#NO_APP
 623              	.LBE372:
GAS LISTING /tmp/ccRzSJoQ.s 			page 20


 624              	.LBE371:
 120:src/riscv.cpp ****         w_sepc(sepc);
 625              		.loc 1 120 9 is_stmt 1
 120:src/riscv.cpp ****         w_sepc(sepc);
 626              		.loc 1 120 15 is_stmt 0
 627 01cc 833784F6 		ld	a5,-152(s0)
 628              	.LVL21:
 629              	.LBB373:
 630              	.LBB374:
 114:src/../h/riscv.hpp **** }
 631              		.loc 3 114 5 is_stmt 1
 114:src/../h/riscv.hpp **** }
 632              		.loc 3 114 65 is_stmt 0
 633              	#APP
 634              	# 114 "src/../h/riscv.hpp" 1
 635              		csrw sepc, a5
 636              	# 0 "" 2
 637              	.LVL22:
 638              	#NO_APP
 639              	.L7:
 640              	.LBE374:
 641              	.LBE373:
 642              	.LBE387:
 643              	.LBE404:
 644              		.loc 1 158 1
 645 01d4 83308109 		ld	ra,152(sp)
 646              		.cfi_remember_state
 647              		.cfi_restore 1
 648 01d8 03340109 		ld	s0,144(sp)
 649              		.cfi_restore 8
 650              		.cfi_def_cfa 2, 160
 651 01dc 83348108 		ld	s1,136(sp)
 652              		.cfi_restore 9
 653 01e0 03390108 		ld	s2,128(sp)
 654              		.cfi_restore 18
 655 01e4 83398107 		ld	s3,120(sp)
 656              		.cfi_restore 19
 657 01e8 033A0107 		ld	s4,112(sp)
 658              		.cfi_restore 20
 659 01ec 1301010A 		addi	sp,sp,160
 660              		.cfi_def_cfa_offset 0
 661 01f0 67800000 		jr	ra
 662              	.LVL23:
 663              	.L34:
 664              		.cfi_restore_state
 665              	.LBB405:
 666              	.LBB388:
 667              	.LBB375:
 668              	.LBB358:
 669              	.LBB346:
 670              	.LBB335:
  62:src/riscv.cpp ****             TCB::running->setFinished(true);
 671              		.loc 1 62 13 is_stmt 1
  62:src/riscv.cpp ****             TCB::running->setFinished(true);
 672              		.loc 1 62 38 is_stmt 0
 673 01f4 97070000 		la	a5,_ZN3TCB7runningE
 673      83B70700 
GAS LISTING /tmp/ccRzSJoQ.s 			page 21


 674              	.LVL24:
 675 01fc 83B70700 		ld	a5,0(a5)
 676              	.LVL25:
 677              	.LBB318:
 678              	.LBB319:
 679              		.file 4 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** #include "../h/print.hpp"
  11:src/../h/tcb.hpp **** 
  12:src/../h/tcb.hpp **** // Thread Control Block
  13:src/../h/tcb.hpp **** class TCB
  14:src/../h/tcb.hpp **** {
  15:src/../h/tcb.hpp **** public:
  16:src/../h/tcb.hpp ****     ~TCB() {
  17:src/../h/tcb.hpp ****         delete[] stack;
  18:src/../h/tcb.hpp ****     }
  19:src/../h/tcb.hpp **** 
  20:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  21:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
 680              		.loc 4 21 36 is_stmt 1
 681              		.loc 4 21 45 is_stmt 0
 682 0200 13071000 		li	a4,1
 683 0204 238AE702 		sb	a4,52(a5)
 684              	.LVL26:
 685              	.LBE319:
 686              	.LBE318:
  63:src/riscv.cpp ****             TCB::dispatch();
 687              		.loc 1 63 13 is_stmt 1
  63:src/riscv.cpp ****             TCB::dispatch();
 688              		.loc 1 63 26 is_stmt 0
 689 0208 97000000 		call	_ZN3TCB8dispatchEv@plt
 689      E7800000 
 690              	.LVL27:
  64:src/riscv.cpp ****             w_sstatus(sstatus);
 691              		.loc 1 64 13 is_stmt 1
  64:src/riscv.cpp ****             w_sstatus(sstatus);
 692              		.loc 1 64 22 is_stmt 0
 693 0210 833704F7 		ld	a5,-144(s0)
 694              	.LVL28:
 695              	.LBB320:
 696              	.LBB321:
 182:src/../h/riscv.hpp **** }
 697              		.loc 3 182 5 is_stmt 1
 182:src/../h/riscv.hpp **** }
 698              		.loc 3 182 77 is_stmt 0
 699              	#APP
 700              	# 182 "src/../h/riscv.hpp" 1
 701              		csrw sstatus, a5
 702              	# 0 "" 2
GAS LISTING /tmp/ccRzSJoQ.s 			page 22


 703              	.LVL29:
 704              	#NO_APP
 705              	.LBE321:
 706              	.LBE320:
  65:src/riscv.cpp ****             w_sepc(sepc);
 707              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             w_sepc(sepc);
 708              		.loc 1 65 19 is_stmt 0
 709 0218 833784F6 		ld	a5,-152(s0)
 710              	.LVL30:
 711              	.LBB322:
 712              	.LBB323:
 114:src/../h/riscv.hpp **** }
 713              		.loc 3 114 5 is_stmt 1
 114:src/../h/riscv.hpp **** }
 714              		.loc 3 114 65 is_stmt 0
 715              	#APP
 716              	# 114 "src/../h/riscv.hpp" 1
 115:src/../h/riscv.hpp **** 
 717              		csrw sepc, a5
 718              	# 0 "" 2
 719              		.loc 3 115 1
 720              	#NO_APP
 721 0220 6FF05FFA 		j	.L9
 722              	.LVL31:
 723              	.L35:
 724              	.LBE323:
 725              	.LBE322:
 726              	.LBB324:
  68:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 727              		.loc 1 68 13 is_stmt 1
  68:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 728              		.loc 1 68 35 is_stmt 0
 729 0224 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 729      83B70700 
 730              	.LVL32:
 731 022c 23B00700 		sd	zero,0(a5)
  69:src/riscv.cpp ****             TCB::dispatch();
 732              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             TCB::dispatch();
 733              		.loc 1 69 26 is_stmt 0
 734 0230 97000000 		call	_ZN3TCB8dispatchEv@plt
 734      E7800000 
 735              	.LVL33:
  70:src/riscv.cpp ****             w_sstatus(sstatus);
 736              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****             w_sstatus(sstatus);
 737              		.loc 1 70 22 is_stmt 0
 738 0238 833704F7 		ld	a5,-144(s0)
 739              	.LVL34:
 740              	.LBB305:
 741              	.LBB306:
 182:src/../h/riscv.hpp **** }
 742              		.loc 3 182 5 is_stmt 1
 182:src/../h/riscv.hpp **** }
 743              		.loc 3 182 77 is_stmt 0
 744              	#APP
GAS LISTING /tmp/ccRzSJoQ.s 			page 23


 745              	# 182 "src/../h/riscv.hpp" 1
 746              		csrw sstatus, a5
 747              	# 0 "" 2
 748              	.LVL35:
 749              	#NO_APP
 750              	.LBE306:
 751              	.LBE305:
  71:src/riscv.cpp ****             w_sepc(sepc);
 752              		.loc 1 71 13 is_stmt 1
  71:src/riscv.cpp ****             w_sepc(sepc);
 753              		.loc 1 71 19 is_stmt 0
 754 0240 833784F6 		ld	a5,-152(s0)
 755              	.LVL36:
 756              	.LBB307:
 757              	.LBB308:
 114:src/../h/riscv.hpp **** }
 758              		.loc 3 114 5 is_stmt 1
 114:src/../h/riscv.hpp **** }
 759              		.loc 3 114 65 is_stmt 0
 760              	#APP
 761              	# 114 "src/../h/riscv.hpp" 1
 115:src/../h/riscv.hpp **** 
 762              		csrw sepc, a5
 763              	# 0 "" 2
 764              		.loc 3 115 1
 765              	#NO_APP
 766 0248 6FF0DFF7 		j	.L9
 767              	.LVL37:
 768              	.L36:
 769              	.LBE308:
 770              	.LBE307:
 771              	.LBB309:
 772              	.LBB297:
 773              	.LBB290:
 774              	.LBB284:
 775              	.LBB279:
 776              	.LBB249:
  89:src/riscv.cpp ****             time_t slice;
 777              		.loc 1 89 13 is_stmt 1
  90:src/riscv.cpp ****             printString("Usao ovde");
 778              		.loc 1 90 13
  90:src/riscv.cpp ****             printString("Usao ovde");
 779              		.loc 1 90 24 is_stmt 0
 780 024c 17050000 		lla	a0,.LC0
 780      13050500 
 781 0254 97000000 		call	_Z11printStringPKc@plt
 781      E7800000 
 782              	.LVL38:
  91:src/riscv.cpp ****             __asm__ volatile("ld t2, 8*11(fp)");
 783              		.loc 1 91 13 is_stmt 1
  91:src/riscv.cpp ****             __asm__ volatile("ld t2, 8*11(fp)");
 784              		.loc 1 91 48 is_stmt 0
 785              	#APP
 786              	# 91 "src/riscv.cpp" 1
  92:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (slice));
 787              		ld t2, 8*11(fp)
 788              	# 0 "" 2
GAS LISTING /tmp/ccRzSJoQ.s 			page 24


 789              		.loc 1 92 13 is_stmt 1
  92:src/riscv.cpp ****             __asm__ volatile("mv %0, t2" : "=r" (slice));
 790              		.loc 1 92 57 is_stmt 0
 791              	# 92 "src/riscv.cpp" 1
 792              		mv s2, t2
 793              	# 0 "" 2
 794              	.LVL39:
  93:src/riscv.cpp ****             printString("\nSlice = ");
 795              		.loc 1 93 13 is_stmt 1
  93:src/riscv.cpp ****             printString("\nSlice = ");
 796              		.loc 1 93 24 is_stmt 0
 797              	#NO_APP
 798 0264 17050000 		lla	a0,.LC1
 798      13050500 
 799 026c 97000000 		call	_Z11printStringPKc@plt
 799      E7800000 
 800              	.LVL40:
  94:src/riscv.cpp ****             printInteger(slice);
 801              		.loc 1 94 13 is_stmt 1
  94:src/riscv.cpp ****             printInteger(slice);
 802              		.loc 1 94 25 is_stmt 0
 803 0274 13050900 		mv	a0,s2
 804 0278 97000000 		call	_Z12printIntegerm@plt
 804      E7800000 
 805              	.LVL41:
  95:src/riscv.cpp ****             printString("\n");
 806              		.loc 1 95 13 is_stmt 1
  95:src/riscv.cpp ****             printString("\n");
 807              		.loc 1 95 24 is_stmt 0
 808 0280 17050000 		lla	a0,.LC2
 808      13050500 
 809 0288 97000000 		call	_Z11printStringPKc@plt
 809      E7800000 
 810              	.LVL42:
  96:src/riscv.cpp ****             if(slice != 0) {
 811              		.loc 1 96 13 is_stmt 1
 812 0290 631E0900 		bnez	s2,.L37
 813              	.LVL43:
 814              	.L14:
 100:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 815              		.loc 1 100 13
 100:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 816              		.loc 1 100 35 is_stmt 0
 817 0294 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 817      83B70700 
 818 029c 23B00700 		sd	zero,0(a5)
 101:src/riscv.cpp ****             TCB::dispatch();
 819              		.loc 1 101 13 is_stmt 1
 101:src/riscv.cpp ****             TCB::dispatch();
 820              		.loc 1 101 26 is_stmt 0
 821 02a0 97000000 		call	_ZN3TCB8dispatchEv@plt
 821      E7800000 
 822              	.LVL44:
 823              	.LBE249:
 824 02a8 6FF0DFF1 		j	.L9
 825              	.LVL45:
 826              	.L37:
GAS LISTING /tmp/ccRzSJoQ.s 			page 25


 827              	.LBB275:
  97:src/riscv.cpp ****                 TCB::running->setSleeping(true);
 828              		.loc 1 97 17 is_stmt 1
  97:src/riscv.cpp ****                 TCB::running->setSleeping(true);
 829              		.loc 1 97 42 is_stmt 0
 830 02ac 97070000 		la	a5,_ZN3TCB7runningE
 830      83B70700 
 831 02b4 03BA0700 		ld	s4,0(a5)
 832              	.LVL46:
 833              	.LBB250:
 834              	.LBB251:
  22:src/../h/tcb.hpp ****     void setSleeping(bool value) { sleeping = value; }
 835              		.loc 4 22 36 is_stmt 1
 836              		.loc 4 22 45 is_stmt 0
 837 02b8 93071000 		li	a5,1
 838 02bc A30AFA02 		sb	a5,53(s4)
 839              	.LVL47:
 840              	.LBE251:
 841              	.LBE250:
  98:src/riscv.cpp ****                 Riscv::sleepingThreads.put(TCB::running, slice);
 842              		.loc 1 98 17 is_stmt 1
 843              	.LBB252:
 844              	.LBB253:
  27:src/../h/../h/sleepingThreadsList.h **** 
  28:src/../h/../h/sleepingThreadsList.h ****     SleepingThreadList(const SleepingThreadList&) = delete;
  29:src/../h/../h/sleepingThreadsList.h **** 
  30:src/../h/../h/sleepingThreadsList.h ****     SleepingThreadList &operator=(const SleepingThreadList&) = delete;
  31:src/../h/../h/sleepingThreadsList.h **** 
  32:src/../h/../h/sleepingThreadsList.h ****     void decFirst(){
  33:src/../h/../h/sleepingThreadsList.h ****         if (head != nullptr) {
  34:src/../h/../h/sleepingThreadsList.h ****             head->relativeTime -= 1;
  35:src/../h/../h/sleepingThreadsList.h ****         }
  36:src/../h/../h/sleepingThreadsList.h ****     }
  37:src/../h/../h/sleepingThreadsList.h ****     time_t peekFirstSlice()
  38:src/../h/../h/sleepingThreadsList.h ****     {
  39:src/../h/../h/sleepingThreadsList.h ****         if (!head) { return -1; }
  40:src/../h/../h/sleepingThreadsList.h ****         return head->relativeTime;
  41:src/../h/../h/sleepingThreadsList.h ****     }
  42:src/../h/../h/sleepingThreadsList.h **** 
  43:src/../h/../h/sleepingThreadsList.h ****     void removeFinishedThreads()
  44:src/../h/../h/sleepingThreadsList.h ****     {
  45:src/../h/../h/sleepingThreadsList.h ****         while (head != nullptr && head->relativeTime == 0){
  46:src/../h/../h/sleepingThreadsList.h ****             Elem *elem = head;
  47:src/../h/../h/sleepingThreadsList.h ****             head = head->next;
  48:src/../h/../h/sleepingThreadsList.h ****             if (!head) { tail = nullptr; }
  49:src/../h/../h/sleepingThreadsList.h ****             elem->data->setSleeping(false);
  50:src/../h/../h/sleepingThreadsList.h ****             Scheduler::put(elem->data);
  51:src/../h/../h/sleepingThreadsList.h ****             delete elem;
  52:src/../h/../h/sleepingThreadsList.h ****         }
  53:src/../h/../h/sleepingThreadsList.h ****     }
  54:src/../h/../h/sleepingThreadsList.h **** 
  55:src/../h/../h/sleepingThreadsList.h ****     void put(TCB* thread, time_t slice){
  56:src/../h/../h/sleepingThreadsList.h ****         if (head == nullptr) {
 845              		.loc 2 56 9
 846              	.LBB254:
 847              		.loc 2 56 13 is_stmt 0
 848 02c0 97040000 		ld	s1,.LANCHOR0
GAS LISTING /tmp/ccRzSJoQ.s 			page 26


 848      83B40400 
 849              		.loc 2 56 9
 850 02c8 63860400 		beqz	s1,.L38
 851              	.LBB255:
  57:src/../h/../h/sleepingThreadsList.h ****             head = new Elem(thread, nullptr, slice);
  58:src/../h/../h/sleepingThreadsList.h ****             tail = head;
  59:src/../h/../h/sleepingThreadsList.h ****         }
  60:src/../h/../h/sleepingThreadsList.h ****         else {
  61:src/../h/../h/sleepingThreadsList.h ****             Elem* temp = head;
  62:src/../h/../h/sleepingThreadsList.h ****             Elem* prev = nullptr;
 852              		.loc 2 62 19
 853 02cc 93090000 		li	s3,0
 854 02d0 6F00C003 		j	.L15
 855              	.L38:
 856              	.LBE255:
  57:src/../h/../h/sleepingThreadsList.h ****             head = new Elem(thread, nullptr, slice);
 857              		.loc 2 57 13 is_stmt 1
  57:src/../h/../h/sleepingThreadsList.h ****             head = new Elem(thread, nullptr, slice);
 858              		.loc 2 57 51 is_stmt 0
 859 02d4 13058001 		li	a0,24
 860 02d8 97000000 		call	_Znwm@plt
 860      E7800000 
 861              	.LVL48:
 862              	.LBB268:
 863              	.LBB269:
  20:src/../h/../h/sleepingThreadsList.h ****     };
 864              		.loc 2 20 109
 865 02e0 23304501 		sd	s4,0(a0)
 866 02e4 23340500 		sd	zero,8(a0)
 867 02e8 23382501 		sd	s2,16(a0)
 868              	.LVL49:
 869              	.LBE269:
 870              	.LBE268:
  57:src/../h/../h/sleepingThreadsList.h ****             head = new Elem(thread, nullptr, slice);
 871              		.loc 2 57 18
 872 02ec 17070000 		lla	a4,.LANCHOR0
 872      13070700 
 873 02f4 2330A700 		sd	a0,0(a4)
  58:src/../h/../h/sleepingThreadsList.h ****         }
 874              		.loc 2 58 13 is_stmt 1
  58:src/../h/../h/sleepingThreadsList.h ****         }
 875              		.loc 2 58 18 is_stmt 0
 876 02f8 2334A700 		sd	a0,8(a4)
 877 02fc 6FF09FF9 		j	.L14
 878              	.LVL50:
 879              	.L39:
 880              	.LBB270:
  63:src/../h/../h/sleepingThreadsList.h ****             while (temp != tail && slice >= temp->relativeTime) {
  64:src/../h/../h/sleepingThreadsList.h ****                 slice -= temp->relativeTime;
 881              		.loc 2 64 17 is_stmt 1
 882              		.loc 2 64 23 is_stmt 0
 883 0300 3309F940 		sub	s2,s2,a5
 884              	.LVL51:
  65:src/../h/../h/sleepingThreadsList.h ****                 prev = temp;
 885              		.loc 2 65 17 is_stmt 1
  66:src/../h/../h/sleepingThreadsList.h ****                 temp = temp->next;
 886              		.loc 2 66 17
GAS LISTING /tmp/ccRzSJoQ.s 			page 27


  65:src/../h/../h/sleepingThreadsList.h ****                 prev = temp;
 887              		.loc 2 65 22 is_stmt 0
 888 0304 93890400 		mv	s3,s1
 889              		.loc 2 66 22
 890 0308 83B48400 		ld	s1,8(s1)
 891              	.LVL52:
 892              	.L15:
  63:src/../h/../h/sleepingThreadsList.h ****             while (temp != tail && slice >= temp->relativeTime) {
 893              		.loc 2 63 13 is_stmt 1
  63:src/../h/../h/sleepingThreadsList.h ****             while (temp != tail && slice >= temp->relativeTime) {
 894              		.loc 2 63 33
  63:src/../h/../h/sleepingThreadsList.h ****             while (temp != tail && slice >= temp->relativeTime) {
 895              		.loc 2 63 28 is_stmt 0
 896 030c 17070000 		ld	a4,.LANCHOR0+8
 896      03370700 
  63:src/../h/../h/sleepingThreadsList.h ****             while (temp != tail && slice >= temp->relativeTime) {
 897              		.loc 2 63 33
 898 0314 63069700 		beq	a4,s1,.L17
  63:src/../h/../h/sleepingThreadsList.h ****             while (temp != tail && slice >= temp->relativeTime) {
 899              		.loc 2 63 51
 900 0318 83B70401 		ld	a5,16(s1)
  63:src/../h/../h/sleepingThreadsList.h ****             while (temp != tail && slice >= temp->relativeTime) {
 901              		.loc 2 63 33
 902 031c E372F9FE 		bleu	a5,s2,.L39
 903              	.L17:
  67:src/../h/../h/sleepingThreadsList.h ****             }
  68:src/../h/../h/sleepingThreadsList.h ****             if (temp == tail){
 904              		.loc 2 68 13 is_stmt 1
 905              	.LBB256:
 906 0320 630C9702 		beq	a4,s1,.L40
 907              	.LBB257:
  69:src/../h/../h/sleepingThreadsList.h ****                 if (slice >= tail->relativeTime){
  70:src/../h/../h/sleepingThreadsList.h ****                     Elem* novi = new Elem(thread, nullptr, slice - tail->relativeTime);
  71:src/../h/../h/sleepingThreadsList.h ****                     tail->next = novi;
  72:src/../h/../h/sleepingThreadsList.h ****                     tail = novi;
  73:src/../h/../h/sleepingThreadsList.h ****                 }
  74:src/../h/../h/sleepingThreadsList.h ****                 else {
  75:src/../h/../h/sleepingThreadsList.h ****                     Elem* novi = new Elem(thread, tail, slice);
  76:src/../h/../h/sleepingThreadsList.h ****                     if (prev != nullptr){
  77:src/../h/../h/sleepingThreadsList.h ****                         prev->next = novi;
  78:src/../h/../h/sleepingThreadsList.h ****                     }
  79:src/../h/../h/sleepingThreadsList.h ****                     else {
  80:src/../h/../h/sleepingThreadsList.h ****                         head = novi;
  81:src/../h/../h/sleepingThreadsList.h ****                     }
  82:src/../h/../h/sleepingThreadsList.h ****                     tail->relativeTime -= slice;
  83:src/../h/../h/sleepingThreadsList.h ****                 }
  84:src/../h/../h/sleepingThreadsList.h ****             }
  85:src/../h/../h/sleepingThreadsList.h ****             else {
  86:src/../h/../h/sleepingThreadsList.h ****                 Elem* novi = new Elem(thread, temp, slice);
 908              		.loc 2 86 17
 909              		.loc 2 86 58 is_stmt 0
 910 0324 13058001 		li	a0,24
 911 0328 97000000 		call	_Znwm@plt
 911      E7800000 
 912              	.LVL53:
 913              	.LBB258:
 914              	.LBB259:
GAS LISTING /tmp/ccRzSJoQ.s 			page 28


  20:src/../h/../h/sleepingThreadsList.h ****     };
 915              		.loc 2 20 109
 916 0330 23304501 		sd	s4,0(a0)
 917 0334 23349500 		sd	s1,8(a0)
 918 0338 23382501 		sd	s2,16(a0)
 919              	.LVL54:
 920              	.LBE259:
 921              	.LBE258:
  87:src/../h/../h/sleepingThreadsList.h ****                 prev->next = novi;
 922              		.loc 2 87 17 is_stmt 1
 923              		.loc 2 87 28 is_stmt 0
 924 033c 23B4A900 		sd	a0,8(s3)
 925              	.L22:
  88:src/../h/../h/sleepingThreadsList.h ****                 while(temp != nullptr){
 926              		.loc 2 88 17 is_stmt 1
 927              		.loc 2 88 28
 928 0340 E38A04F4 		beqz	s1,.L14
  89:src/../h/../h/sleepingThreadsList.h ****                     temp->relativeTime -= slice;
 929              		.loc 2 89 21
 930              		.loc 2 89 40 is_stmt 0
 931 0344 83B70401 		ld	a5,16(s1)
 932 0348 B3872741 		sub	a5,a5,s2
 933 034c 23B8F400 		sd	a5,16(s1)
  90:src/../h/../h/sleepingThreadsList.h ****                     temp = temp->next;
 934              		.loc 2 90 21 is_stmt 1
 935              		.loc 2 90 26 is_stmt 0
 936 0350 83B48400 		ld	s1,8(s1)
 937              	.LVL55:
  88:src/../h/../h/sleepingThreadsList.h ****                 while(temp != nullptr){
 938              		.loc 2 88 17
 939 0354 6FF0DFFE 		j	.L22
 940              	.LVL56:
 941              	.L40:
 942              	.LBE257:
 943              	.LBE256:
 944              	.LBE270:
 945              	.LBE254:
 946              	.LBE253:
 947              	.LBE252:
 948              	.LBE275:
 949              	.LBE279:
 950              	.LBE284:
 951              	.LBE290:
 952              	.LBE297:
 953              	.LBE309:
 954              	.LBE324:
 955              	.LBE335:
 956              	.LBE346:
 957              	.LBE358:
 958              	.LBE375:
 959              	.LBE388:
 960              	.LBE405:
  69:src/../h/../h/sleepingThreadsList.h ****                     Elem* novi = new Elem(thread, nullptr, slice - tail->relativeTime);
 961              		.loc 2 69 17 is_stmt 1
 962              	.LBB406:
 963              	.LBB389:
 964              	.LBB376:
GAS LISTING /tmp/ccRzSJoQ.s 			page 29


 965              	.LBB359:
 966              	.LBB347:
 967              	.LBB336:
 968              	.LBB325:
 969              	.LBB310:
 970              	.LBB298:
 971              	.LBB291:
 972              	.LBB285:
 973              	.LBB280:
 974              	.LBB276:
 975              	.LBB274:
 976              	.LBB273:
 977              	.LBB272:
 978              	.LBB271:
 979              	.LBB267:
 980              	.LBB260:
  69:src/../h/../h/sleepingThreadsList.h ****                     Elem* novi = new Elem(thread, nullptr, slice - tail->relativeTime);
 981              		.loc 2 69 36 is_stmt 0
 982 0358 83370701 		ld	a5,16(a4)
  69:src/../h/../h/sleepingThreadsList.h ****                     Elem* novi = new Elem(thread, nullptr, slice - tail->relativeTime);
 983              		.loc 2 69 17
 984 035c 636EF902 		bltu	s2,a5,.L19
 985              	.LBB261:
  70:src/../h/../h/sleepingThreadsList.h ****                     tail->next = novi;
 986              		.loc 2 70 21 is_stmt 1
  70:src/../h/../h/sleepingThreadsList.h ****                     tail->next = novi;
 987              		.loc 2 70 86 is_stmt 0
 988 0360 13058001 		li	a0,24
 989 0364 97000000 		call	_Znwm@plt
 989      E7800000 
 990              	.LVL57:
  70:src/../h/../h/sleepingThreadsList.h ****                     tail->next = novi;
 991              		.loc 2 70 68
 992 036c 97060000 		lla	a3,.LANCHOR0
 992      93860600 
 993 0374 03B68600 		ld	a2,8(a3)
  70:src/../h/../h/sleepingThreadsList.h ****                     tail->next = novi;
 994              		.loc 2 70 74
 995 0378 03370601 		ld	a4,16(a2)
  70:src/../h/../h/sleepingThreadsList.h ****                     tail->next = novi;
 996              		.loc 2 70 86
 997 037c 3309E940 		sub	s2,s2,a4
 998              	.LVL58:
 999              	.LBB262:
 1000              	.LBB263:
  20:src/../h/../h/sleepingThreadsList.h ****     };
 1001              		.loc 2 20 109
 1002 0380 23304501 		sd	s4,0(a0)
 1003 0384 23340500 		sd	zero,8(a0)
 1004 0388 23382501 		sd	s2,16(a0)
 1005              	.LVL59:
 1006              	.LBE263:
 1007              	.LBE262:
  71:src/../h/../h/sleepingThreadsList.h ****                     tail = novi;
 1008              		.loc 2 71 21 is_stmt 1
  71:src/../h/../h/sleepingThreadsList.h ****                     tail = novi;
 1009              		.loc 2 71 32 is_stmt 0
GAS LISTING /tmp/ccRzSJoQ.s 			page 30


 1010 038c 2334A600 		sd	a0,8(a2)
  72:src/../h/../h/sleepingThreadsList.h ****                 }
 1011              		.loc 2 72 21 is_stmt 1
  72:src/../h/../h/sleepingThreadsList.h ****                 }
 1012              		.loc 2 72 26 is_stmt 0
 1013 0390 23B4A600 		sd	a0,8(a3)
 1014              	.LBE261:
 1015 0394 6FF01FF0 		j	.L14
 1016              	.LVL60:
 1017              	.L19:
 1018              	.LBB264:
  75:src/../h/../h/sleepingThreadsList.h ****                     if (prev != nullptr){
 1019              		.loc 2 75 21 is_stmt 1
  75:src/../h/../h/sleepingThreadsList.h ****                     if (prev != nullptr){
 1020              		.loc 2 75 62 is_stmt 0
 1021 0398 13058001 		li	a0,24
 1022 039c 97000000 		call	_Znwm@plt
 1022      E7800000 
 1023              	.LVL61:
 1024              	.LBB265:
 1025              	.LBB266:
  20:src/../h/../h/sleepingThreadsList.h ****     };
 1026              		.loc 2 20 109
 1027 03a4 23304501 		sd	s4,0(a0)
 1028              	.LVL62:
 1029 03a8 17070000 		ld	a4,.LANCHOR0+8
 1029      03370700 
 1030 03b0 2334E500 		sd	a4,8(a0)
 1031 03b4 23382501 		sd	s2,16(a0)
 1032              	.LVL63:
 1033              	.LBE266:
 1034              	.LBE265:
  76:src/../h/../h/sleepingThreadsList.h ****                         prev->next = novi;
 1035              		.loc 2 76 21 is_stmt 1
 1036 03b8 63800902 		beqz	s3,.L20
  77:src/../h/../h/sleepingThreadsList.h ****                     }
 1037              		.loc 2 77 25
  77:src/../h/../h/sleepingThreadsList.h ****                     }
 1038              		.loc 2 77 36 is_stmt 0
 1039 03bc 23B4A900 		sd	a0,8(s3)
 1040              	.L21:
  82:src/../h/../h/sleepingThreadsList.h ****                 }
 1041              		.loc 2 82 21 is_stmt 1
 1042 03c0 17070000 		ld	a4,.LANCHOR0+8
 1042      03370700 
  82:src/../h/../h/sleepingThreadsList.h ****                 }
 1043              		.loc 2 82 40 is_stmt 0
 1044 03c8 83370701 		ld	a5,16(a4)
 1045 03cc 33892741 		sub	s2,a5,s2
 1046              	.LVL64:
 1047 03d0 23382701 		sd	s2,16(a4)
 1048 03d4 6FF01FEC 		j	.L14
 1049              	.LVL65:
 1050              	.L20:
  80:src/../h/../h/sleepingThreadsList.h ****                     }
 1051              		.loc 2 80 25 is_stmt 1
  80:src/../h/../h/sleepingThreadsList.h ****                     }
GAS LISTING /tmp/ccRzSJoQ.s 			page 31


 1052              		.loc 2 80 30 is_stmt 0
 1053 03d8 17070000 		sd	a0,.LANCHOR0,a4
 1053      2330A700 
 1054 03e0 6FF01FFE 		j	.L21
 1055              	.LVL66:
 1056              	.L32:
 1057              	.LBE264:
 1058              	.LBE260:
 1059              	.LBE267:
 1060              	.LBE271:
 1061              	.LBE272:
 1062              	.LBE273:
 1063              	.LBE274:
 1064              	.LBE276:
 1065              	.LBE280:
 1066              	.LBE285:
 1067              	.LBE291:
 1068              	.LBE298:
 1069              	.LBE310:
 1070              	.LBE325:
 1071              	.LBE336:
 1072              	.LBE347:
 1073              	.LBE359:
 1074              	.LBE376:
 1075              	.LBE389:
 1076              	.LBB390:
 1077              	.LBB196:
 126:src/riscv.cpp ****         time_t temp = Riscv::sleepingThreads.peekFirstSlice();
 1078              		.loc 1 126 9 is_stmt 1
 1079              	.LBB197:
 1080              	.LBB198:
  39:src/../h/../h/sleepingThreadsList.h ****         return head->relativeTime;
 1081              		.loc 2 39 9
  39:src/../h/../h/sleepingThreadsList.h ****         return head->relativeTime;
 1082              		.loc 2 39 14 is_stmt 0
 1083 03e4 17070000 		ld	a4,.LANCHOR0
 1083      03370700 
 1084              	.LVL67:
  39:src/../h/../h/sleepingThreadsList.h ****         return head->relativeTime;
 1085              		.loc 2 39 9
 1086 03ec 630E0700 		beqz	a4,.L25
  40:src/../h/../h/sleepingThreadsList.h ****     }
 1087              		.loc 2 40 9 is_stmt 1
  40:src/../h/../h/sleepingThreadsList.h ****     }
 1088              		.loc 2 40 22 is_stmt 0
 1089 03f0 83370701 		ld	a5,16(a4)
 1090              	.LVL68:
 1091              	.LBE198:
 1092              	.LBE197:
 127:src/riscv.cpp ****         time_t t1 = -1;
 1093              		.loc 1 127 9 is_stmt 1
 129:src/riscv.cpp ****         if (temp != t1){
 1094              		.loc 1 129 9
 1095 03f4 9306F0FF 		li	a3,-1
 1096              	.LVL69:
 1097 03f8 6388D700 		beq	a5,a3,.L25
 132:src/riscv.cpp ****             Riscv::sleepingThreads.decFirst();
GAS LISTING /tmp/ccRzSJoQ.s 			page 32


 1098              		.loc 1 132 13
 1099              	.LVL70:
 1100              	.LBB199:
 1101              	.LBB200:
  33:src/../h/../h/sleepingThreadsList.h ****             head->relativeTime -= 1;
 1102              		.loc 2 33 9
  34:src/../h/../h/sleepingThreadsList.h ****         }
 1103              		.loc 2 34 13
  34:src/../h/../h/sleepingThreadsList.h ****         }
 1104              		.loc 2 34 32 is_stmt 0
 1105 03fc 9387F7FF 		addi	a5,a5,-1
 1106              	.LVL71:
 1107 0400 2338F700 		sd	a5,16(a4)
 1108              	.LVL72:
 1109              	.LBE200:
 1110              	.LBE199:
 133:src/riscv.cpp ****             if (Riscv::sleepingThreads.peekFirstSlice() == 0) {
 1111              		.loc 1 133 13 is_stmt 1
 1112              	.LBE196:
 1113              	.LBE390:
 1114              	.LBE406:
  39:src/../h/../h/sleepingThreadsList.h ****         return head->relativeTime;
 1115              		.loc 2 39 9
  40:src/../h/../h/sleepingThreadsList.h ****     }
 1116              		.loc 2 40 9
 1117              	.LBB407:
 1118              	.LBB391:
 1119              	.LBB221:
 133:src/riscv.cpp ****             if (Riscv::sleepingThreads.peekFirstSlice() == 0) {
 1120              		.loc 1 133 13 is_stmt 0
 1121 0404 638E0708 		beqz	a5,.L27
 1122              	.LVL73:
 1123              	.L25:
 137:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 1124              		.loc 1 137 9 is_stmt 1
 1125              	.LBB201:
 1126              	.LBB202:
 148:src/../h/riscv.hpp **** }
 1127              		.loc 3 148 5
 148:src/../h/riscv.hpp **** }
 1128              		.loc 3 148 64 is_stmt 0
 1129 0408 93072000 		li	a5,2
 1130              	#APP
 1131              	# 148 "src/../h/riscv.hpp" 1
 1132              		csrc sip, a5
 1133              	# 0 "" 2
 1134              	.LVL74:
 1135              	#NO_APP
 1136              	.LBE202:
 1137              	.LBE201:
 138:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1138              		.loc 1 138 9 is_stmt 1
 138:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1139              		.loc 1 138 30 is_stmt 0
 1140 0410 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 1140      03370700 
 1141 0418 83370700 		ld	a5,0(a4)
GAS LISTING /tmp/ccRzSJoQ.s 			page 33


 1142 041c 93871700 		addi	a5,a5,1
 1143 0420 2330F700 		sd	a5,0(a4)
 139:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1144              		.loc 1 139 9 is_stmt 1
 1145              	.LBB203:
 139:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1146              		.loc 1 139 64 is_stmt 0
 1147 0424 17070000 		la	a4,_ZN3TCB7runningE
 1147      03370700 
 1148 042c 03370700 		ld	a4,0(a4)
 1149              	.LVL75:
 1150              	.LBB204:
 1151              	.LBB205:
  23:src/../h/tcb.hpp ****     bool isSleeping() const { return sleeping; }
  24:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 1152              		.loc 4 24 35 is_stmt 1
 1153              		.loc 4 24 42 is_stmt 0
 1154 0430 03378702 		ld	a4,40(a4)
 1155              	.LVL76:
 1156              	.LBE205:
 1157              	.LBE204:
 139:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1158              		.loc 1 139 9
 1159 0434 E3E0E7DA 		bltu	a5,a4,.L7
 1160              	.LBB206:
 141:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1161              		.loc 1 141 13 is_stmt 1
 1162              	.LBB207:
 1163              	.LBB208:
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1164              		.loc 3 107 5
 108:src/../h/riscv.hpp ****     return sepc;
 1165              		.loc 3 108 5
 108:src/../h/riscv.hpp ****     return sepc;
 1166              		.loc 3 108 64 is_stmt 0
 1167              	#APP
 1168              	# 108 "src/../h/riscv.hpp" 1
 1169              		csrr a5, sepc
 1170              	# 0 "" 2
 1171              	#NO_APP
 1172 043c 2334F4FC 		sd	a5,-56(s0)
 109:src/../h/riscv.hpp **** }
 1173              		.loc 3 109 5 is_stmt 1
 109:src/../h/riscv.hpp **** }
 1174              		.loc 3 109 12 is_stmt 0
 1175 0440 833784FC 		ld	a5,-56(s0)
 1176              	.LBE208:
 1177              	.LBE207:
 141:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1178              		.loc 1 141 43
 1179 0444 2334F4F8 		sd	a5,-120(s0)
 142:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1180              		.loc 1 142 13 is_stmt 1
 1181              	.LBB209:
 1182              	.LBB210:
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1183              		.loc 3 175 5
GAS LISTING /tmp/ccRzSJoQ.s 			page 34


 176:src/../h/riscv.hpp ****     return sstatus;
 1184              		.loc 3 176 5
 176:src/../h/riscv.hpp ****     return sstatus;
 1185              		.loc 3 176 76 is_stmt 0
 1186              	#APP
 1187              	# 176 "src/../h/riscv.hpp" 1
 1188              		csrr a5, sstatus
 1189              	# 0 "" 2
 1190              	#NO_APP
 1191 044c 2330F4FC 		sd	a5,-64(s0)
 177:src/../h/riscv.hpp **** }
 1192              		.loc 3 177 5 is_stmt 1
 177:src/../h/riscv.hpp **** }
 1193              		.loc 3 177 12 is_stmt 0
 1194 0450 833704FC 		ld	a5,-64(s0)
 1195              	.LBE210:
 1196              	.LBE209:
 142:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1197              		.loc 1 142 49
 1198 0454 2338F4F8 		sd	a5,-112(s0)
 143:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1199              		.loc 1 143 13 is_stmt 1
 143:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1200              		.loc 1 143 35 is_stmt 0
 1201 0458 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 1201      83B70700 
 1202 0460 23B00700 		sd	zero,0(a5)
 144:src/riscv.cpp ****             TCB::dispatch();
 1203              		.loc 1 144 13 is_stmt 1
 144:src/riscv.cpp ****             TCB::dispatch();
 1204              		.loc 1 144 26 is_stmt 0
 1205 0464 97000000 		call	_ZN3TCB8dispatchEv@plt
 1205      E7800000 
 1206              	.LVL77:
 145:src/riscv.cpp ****             w_sstatus(sstatus);
 1207              		.loc 1 145 13 is_stmt 1
 145:src/riscv.cpp ****             w_sstatus(sstatus);
 1208              		.loc 1 145 22 is_stmt 0
 1209 046c 833704F9 		ld	a5,-112(s0)
 1210              	.LVL78:
 1211              	.LBB211:
 1212              	.LBB212:
 182:src/../h/riscv.hpp **** }
 1213              		.loc 3 182 5 is_stmt 1
 182:src/../h/riscv.hpp **** }
 1214              		.loc 3 182 77 is_stmt 0
 1215              	#APP
 1216              	# 182 "src/../h/riscv.hpp" 1
 1217              		csrw sstatus, a5
 1218              	# 0 "" 2
 1219              	.LVL79:
 1220              	#NO_APP
 1221              	.LBE212:
 1222              	.LBE211:
 146:src/riscv.cpp ****             w_sepc(sepc);
 1223              		.loc 1 146 13 is_stmt 1
 146:src/riscv.cpp ****             w_sepc(sepc);
GAS LISTING /tmp/ccRzSJoQ.s 			page 35


 1224              		.loc 1 146 19 is_stmt 0
 1225 0474 833784F8 		ld	a5,-120(s0)
 1226              	.LVL80:
 1227              	.LBB213:
 1228              	.LBB214:
 114:src/../h/riscv.hpp **** }
 1229              		.loc 3 114 5 is_stmt 1
 114:src/../h/riscv.hpp **** }
 1230              		.loc 3 114 65 is_stmt 0
 1231              	#APP
 1232              	# 114 "src/../h/riscv.hpp" 1
 115:src/../h/riscv.hpp **** 
 1233              		csrw sepc, a5
 1234              	# 0 "" 2
 1235              		.loc 3 115 1
 1236              	#NO_APP
 1237 047c 6FF09FD5 		j	.L7
 1238              	.LVL81:
 1239              	.L42:
 1240              	.LBE214:
 1241              	.LBE213:
 1242              	.LBE206:
 1243              	.LBE203:
 1244              	.LBB215:
 1245              	.LBB216:
 1246              	.LBB217:
  48:src/../h/../h/sleepingThreadsList.h ****             elem->data->setSleeping(false);
 1247              		.loc 2 48 26 is_stmt 1
  48:src/../h/../h/sleepingThreadsList.h ****             elem->data->setSleeping(false);
 1248              		.loc 2 48 31 is_stmt 0
 1249 0480 97070000 		sd	zero,.LANCHOR0+8,a5
 1249      23B00700 
 1250              	.L26:
  49:src/../h/../h/sleepingThreadsList.h ****             Scheduler::put(elem->data);
 1251              		.loc 2 49 13 is_stmt 1
  49:src/../h/../h/sleepingThreadsList.h ****             Scheduler::put(elem->data);
 1252              		.loc 2 49 19 is_stmt 0
 1253 0488 83B70400 		ld	a5,0(s1)
 1254              	.LVL82:
 1255              	.LBB218:
 1256              	.LBB219:
  22:src/../h/tcb.hpp ****     bool isSleeping() const { return sleeping; }
 1257              		.loc 4 22 36 is_stmt 1
  22:src/../h/tcb.hpp ****     bool isSleeping() const { return sleeping; }
 1258              		.loc 4 22 45 is_stmt 0
 1259 048c A38A0702 		sb	zero,53(a5)
 1260              	.LVL83:
 1261              	.LBE219:
 1262              	.LBE218:
  50:src/../h/../h/sleepingThreadsList.h ****             delete elem;
 1263              		.loc 2 50 13 is_stmt 1
  50:src/../h/../h/sleepingThreadsList.h ****             delete elem;
 1264              		.loc 2 50 27 is_stmt 0
 1265 0490 03B50400 		ld	a0,0(s1)
 1266 0494 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 1266      E7800000 
 1267              	.LVL84:
GAS LISTING /tmp/ccRzSJoQ.s 			page 36


  51:src/../h/../h/sleepingThreadsList.h ****         }
 1268              		.loc 2 51 13 is_stmt 1
  51:src/../h/../h/sleepingThreadsList.h ****         }
 1269              		.loc 2 51 24 is_stmt 0
 1270 049c 63960402 		bnez	s1,.L41
 1271              	.LVL85:
 1272              	.L27:
 1273              	.LBE217:
  45:src/../h/../h/sleepingThreadsList.h ****             Elem *elem = head;
 1274              		.loc 2 45 9 is_stmt 1
  45:src/../h/../h/sleepingThreadsList.h ****             Elem *elem = head;
 1275              		.loc 2 45 32
  45:src/../h/../h/sleepingThreadsList.h ****             Elem *elem = head;
 1276              		.loc 2 45 16 is_stmt 0
 1277 04a0 97040000 		ld	s1,.LANCHOR0
 1277      83B40400 
  45:src/../h/../h/sleepingThreadsList.h ****             Elem *elem = head;
 1278              		.loc 2 45 32
 1279 04a8 E38004F6 		beqz	s1,.L25
  45:src/../h/../h/sleepingThreadsList.h ****             Elem *elem = head;
 1280              		.loc 2 45 41
 1281 04ac 83B70401 		ld	a5,16(s1)
  45:src/../h/../h/sleepingThreadsList.h ****             Elem *elem = head;
 1282              		.loc 2 45 32
 1283 04b0 E39C07F4 		bnez	a5,.L25
 1284              	.LBB220:
  46:src/../h/../h/sleepingThreadsList.h ****             head = head->next;
 1285              		.loc 2 46 13 is_stmt 1
 1286              	.LVL86:
  47:src/../h/../h/sleepingThreadsList.h ****             if (!head) { tail = nullptr; }
 1287              		.loc 2 47 13
  47:src/../h/../h/sleepingThreadsList.h ****             if (!head) { tail = nullptr; }
 1288              		.loc 2 47 26 is_stmt 0
 1289 04b4 83B78400 		ld	a5,8(s1)
  47:src/../h/../h/sleepingThreadsList.h ****             if (!head) { tail = nullptr; }
 1290              		.loc 2 47 18
 1291 04b8 17070000 		sd	a5,.LANCHOR0,a4
 1291      2330F700 
  48:src/../h/../h/sleepingThreadsList.h ****             elem->data->setSleeping(false);
 1292              		.loc 2 48 13 is_stmt 1
 1293 04c0 E39407FC 		bnez	a5,.L26
 1294 04c4 6FF0DFFB 		j	.L42
 1295              	.L41:
  51:src/../h/../h/sleepingThreadsList.h ****         }
 1296              		.loc 2 51 20 is_stmt 0
 1297 04c8 13850400 		mv	a0,s1
 1298 04cc 97000000 		call	_ZdlPv@plt
 1298      E7800000 
 1299              	.LVL87:
 1300 04d4 6FF0DFFC 		j	.L27
 1301              	.LBE220:
 1302              	.LBE216:
 1303              	.LBE215:
 1304              	.LBE221:
 1305              	.LBE391:
 1306              	.LBE407:
 1307              		.cfi_endproc
GAS LISTING /tmp/ccRzSJoQ.s 			page 37


 1308              	.LFE47:
 1310              		.align	2
 1312              	_GLOBAL__sub_I__ZN5Riscv15sleepingThreadsE:
 1313              	.LFB49:
 1314              		.loc 1 158 1 is_stmt 1
 1315              		.cfi_startproc
 1316 04d8 130101FF 		addi	sp,sp,-16
 1317              		.cfi_def_cfa_offset 16
 1318 04dc 23341100 		sd	ra,8(sp)
 1319 04e0 23308100 		sd	s0,0(sp)
 1320              		.cfi_offset 1, -8
 1321              		.cfi_offset 8, -16
 1322 04e4 13040101 		addi	s0,sp,16
 1323              		.cfi_def_cfa 8, 0
 1324              		.loc 1 158 1 is_stmt 0
 1325 04e8 B7050100 		li	a1,65536
 1326 04ec 9385F5FF 		addi	a1,a1,-1
 1327 04f0 13051000 		li	a0,1
 1328 04f4 97000000 		call	_Z41__static_initialization_and_destruction_0ii
 1328      E7800000 
 1329              	.LVL88:
 1330 04fc 83308100 		ld	ra,8(sp)
 1331              		.cfi_restore 1
 1332 0500 03340100 		ld	s0,0(sp)
 1333              		.cfi_restore 8
 1334              		.cfi_def_cfa 2, 16
 1335 0504 13010101 		addi	sp,sp,16
 1336              		.cfi_def_cfa_offset 0
 1337 0508 67800000 		jr	ra
 1338              		.cfi_endproc
 1339              	.LFE49:
 1341              		.section	.init_array,"aw"
 1342              		.align	3
 1343 0000 00000000 		.dword	_GLOBAL__sub_I__ZN5Riscv15sleepingThreadsE
 1343      00000000 
 1344              		.globl	_ZN5Riscv15sleepingThreadsE
 1345              		.bss
 1346              		.align	3
 1347              		.set	.LANCHOR0,. + 0
 1350              	_ZN5Riscv15sleepingThreadsE:
 1351 0000 00000000 		.zero	16
 1351      00000000 
 1351      00000000 
 1351      00000000 
 1352              		.text
 1353              	.Letext0:
 1354              		.file 5 "src/../h/../lib/hw.h"
 1355              		.file 6 "src/../h/scheduler.hpp"
 1356              		.file 7 "src/../h/../h/syscall_c.h"
 1357              		.file 8 "src/../h/codes.h"
 1358              		.file 9 "src/../h/../h/print.hpp"
 1359              		.file 10 "src/../lib/console.h"
GAS LISTING /tmp/ccRzSJoQ.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccRzSJoQ.s:8      .text:0000000000000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccRzSJoQ.s:12     .text:0000000000000000 .L0 
     /tmp/ccRzSJoQ.s:14     .text:0000000000000000 .L0 
     /tmp/ccRzSJoQ.s:15     .text:0000000000000004 .L0 
     /tmp/ccRzSJoQ.s:17     .text:0000000000000008 .L0 
     /tmp/ccRzSJoQ.s:19     .text:000000000000000c .L0 
     /tmp/ccRzSJoQ.s:21     .text:000000000000000c .L0 
     /tmp/ccRzSJoQ.s:25     .text:0000000000000018 .L0 
     /tmp/ccRzSJoQ.s:26     .text:0000000000000018 .L0 
     /tmp/ccRzSJoQ.s:27     .text:0000000000000018 .L0 
     /tmp/ccRzSJoQ.s:29     .text:000000000000001c .L0 
     /tmp/ccRzSJoQ.s:32     .text:0000000000000020 .L0 
     /tmp/ccRzSJoQ.s:34     .text:0000000000000020 .L0 
     /tmp/ccRzSJoQ.s:43     .text:000000000000002c .L0 
     /tmp/ccRzSJoQ.s:51     .text:000000000000003c .L0 
     /tmp/ccRzSJoQ.s:52     .text:0000000000000040 .L0 
     /tmp/ccRzSJoQ.s:58     .text:0000000000000040 _ZN5Riscv10popSppSpieEv
     /tmp/ccRzSJoQ.s:61     .text:0000000000000040 .L0 
     /tmp/ccRzSJoQ.s:62     .text:0000000000000040 .L0 
     /tmp/ccRzSJoQ.s:63     .text:0000000000000044 .L0 
     /tmp/ccRzSJoQ.s:65     .text:0000000000000048 .L0 
     /tmp/ccRzSJoQ.s:67     .text:000000000000004c .L0 
     /tmp/ccRzSJoQ.s:69     .text:000000000000004c .L0 
       src/riscv.cpp:16     .text:000000000000004c .L0 
     /tmp/ccRzSJoQ.s:75     .text:0000000000000050 .L0 
       src/riscv.cpp:17     .text:0000000000000050 .L0 
     /tmp/ccRzSJoQ.s:81     .text:0000000000000054 .L0 
     /tmp/ccRzSJoQ.s:82     .text:0000000000000058 .L0 
     /tmp/ccRzSJoQ.s:83     .text:0000000000000058 .L0 
     /tmp/ccRzSJoQ.s:85     .text:000000000000005c .L0 
     /tmp/ccRzSJoQ.s:87     .text:0000000000000060 .L0 
     /tmp/ccRzSJoQ.s:104    .text:0000000000000060 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccRzSJoQ.s:107    .text:0000000000000060 .L0 
     /tmp/ccRzSJoQ.s:108    .text:0000000000000060 .L0 
     /tmp/ccRzSJoQ.s:109    .text:0000000000000064 .L0 
     /tmp/ccRzSJoQ.s:116    .text:000000000000007c .L0 
     /tmp/ccRzSJoQ.s:117    .text:000000000000007c .L0 
     /tmp/ccRzSJoQ.s:118    .text:000000000000007c .L0 
     /tmp/ccRzSJoQ.s:119    .text:000000000000007c .L0 
     /tmp/ccRzSJoQ.s:120    .text:000000000000007c .L0 
     /tmp/ccRzSJoQ.s:121    .text:000000000000007c .L0 
     /tmp/ccRzSJoQ.s:123    .text:0000000000000080 .L0 
     /tmp/ccRzSJoQ.s:128    .text:0000000000000080 .L0 
     /tmp/ccRzSJoQ.s:129    .text:0000000000000080 .L0 
     /tmp/ccRzSJoQ.s:130    .text:0000000000000080 .L0 
  src/../h/riscv.hpp:96     .text:0000000000000080 .L0 
     /tmp/ccRzSJoQ.s:138    .text:0000000000000088 .L0 
     /tmp/ccRzSJoQ.s:139    .text:0000000000000088 .L0 
     /tmp/ccRzSJoQ.s:145    .text:000000000000008c .L0 
     /tmp/ccRzSJoQ.s:146    .text:000000000000008c .L0 
     /tmp/ccRzSJoQ.s:148    .text:0000000000000090 .L0 
     /tmp/ccRzSJoQ.s:154    .text:0000000000000098 .L0 
     /tmp/ccRzSJoQ.s:159    .text:00000000000000a8 .L0 
     /tmp/ccRzSJoQ.s:164    .text:00000000000000b8 .L0 
     /tmp/ccRzSJoQ.s:165    .text:00000000000000b8 .L0 
GAS LISTING /tmp/ccRzSJoQ.s 			page 39


     /tmp/ccRzSJoQ.s:170    .text:00000000000000c0 .L0 
     /tmp/ccRzSJoQ.s:178    .text:00000000000000c4 .L0 
     /tmp/ccRzSJoQ.s:179    .text:00000000000000c4 .L0 
     /tmp/ccRzSJoQ.s:180    .text:00000000000000c4 .L0 
  src/../h/riscv.hpp:108    .text:00000000000000c4 .L0 
     /tmp/ccRzSJoQ.s:188    .text:00000000000000cc .L0 
     /tmp/ccRzSJoQ.s:189    .text:00000000000000cc .L0 
     /tmp/ccRzSJoQ.s:193    .text:00000000000000d0 .L0 
     /tmp/ccRzSJoQ.s:195    .text:00000000000000d4 .L0 
     /tmp/ccRzSJoQ.s:199    .text:00000000000000d8 .L0 
     /tmp/ccRzSJoQ.s:200    .text:00000000000000d8 .L0 
     /tmp/ccRzSJoQ.s:201    .text:00000000000000d8 .L0 
  src/../h/riscv.hpp:176    .text:00000000000000d8 .L0 
     /tmp/ccRzSJoQ.s:209    .text:00000000000000e0 .L0 
     /tmp/ccRzSJoQ.s:210    .text:00000000000000e0 .L0 
     /tmp/ccRzSJoQ.s:214    .text:00000000000000e4 .L0 
     /tmp/ccRzSJoQ.s:216    .text:00000000000000e8 .L0 
     /tmp/ccRzSJoQ.s:217    .text:00000000000000e8 .L0 
       src/riscv.cpp:31     .text:00000000000000e8 .L0 
     /tmp/ccRzSJoQ.s:223    .text:00000000000000ec .L0 
       src/riscv.cpp:32     .text:00000000000000ec .L0 
     /tmp/ccRzSJoQ.s:231    .text:00000000000000f0 .L0 
     /tmp/ccRzSJoQ.s:242    .text:00000000000000f8 .L0 
     /tmp/ccRzSJoQ.s:254    .text:0000000000000100 .L0 
     /tmp/ccRzSJoQ.s:268    .text:0000000000000108 .L0 
     /tmp/ccRzSJoQ.s:284    .text:0000000000000110 .L0 
     /tmp/ccRzSJoQ.s:302    .text:0000000000000118 .L0 
     /tmp/ccRzSJoQ.s:322    .text:0000000000000120 .L0 
     /tmp/ccRzSJoQ.s:344    .text:0000000000000128 .L0 
     /tmp/ccRzSJoQ.s:368    .text:0000000000000130 .L0 
     /tmp/ccRzSJoQ.s:394    .text:0000000000000138 .L0 
     /tmp/ccRzSJoQ.s:422    .text:0000000000000140 .L0 
     /tmp/ccRzSJoQ.s:452    .text:0000000000000148 .L0 
     /tmp/ccRzSJoQ.s:458    .text:0000000000000150 .L0 
     /tmp/ccRzSJoQ.s:459    .text:0000000000000150 .L0 
     /tmp/ccRzSJoQ.s:460    .text:0000000000000150 .L0 
  src/../h/riscv.hpp:108    .text:0000000000000150 .L0 
     /tmp/ccRzSJoQ.s:469    .text:0000000000000158 .L0 
     /tmp/ccRzSJoQ.s:470    .text:0000000000000158 .L0 
     /tmp/ccRzSJoQ.s:474    .text:000000000000015c .L0 
     /tmp/ccRzSJoQ.s:476    .text:0000000000000160 .L0 
     /tmp/ccRzSJoQ.s:480    .text:0000000000000164 .L0 
     /tmp/ccRzSJoQ.s:481    .text:0000000000000164 .L0 
     /tmp/ccRzSJoQ.s:482    .text:0000000000000164 .L0 
  src/../h/riscv.hpp:176    .text:0000000000000164 .L0 
     /tmp/ccRzSJoQ.s:490    .text:000000000000016c .L0 
     /tmp/ccRzSJoQ.s:491    .text:000000000000016c .L0 
     /tmp/ccRzSJoQ.s:495    .text:0000000000000170 .L0 
     /tmp/ccRzSJoQ.s:497    .text:0000000000000174 .L0 
     /tmp/ccRzSJoQ.s:498    .text:0000000000000174 .L0 
     /tmp/ccRzSJoQ.s:501    .text:0000000000000180 .L0 
     /tmp/ccRzSJoQ.s:502    .text:0000000000000180 .L0 
     /tmp/ccRzSJoQ.s:505    .text:0000000000000188 .L0 
     /tmp/ccRzSJoQ.s:506    .text:0000000000000188 .L0 
     /tmp/ccRzSJoQ.s:511    .text:000000000000018c .L0 
  src/../h/riscv.hpp:182    .text:000000000000018c .L0 
     /tmp/ccRzSJoQ.s:521    .text:0000000000000190 .L0 
GAS LISTING /tmp/ccRzSJoQ.s 			page 40


     /tmp/ccRzSJoQ.s:522    .text:0000000000000190 .L0 
     /tmp/ccRzSJoQ.s:527    .text:0000000000000194 .L0 
  src/../h/riscv.hpp:114    .text:0000000000000194 .L0 
     /tmp/ccRzSJoQ.s:534    .text:0000000000000198 .L0 
     /tmp/ccRzSJoQ.s:551    .text:000000000000019c .L0 
     /tmp/ccRzSJoQ.s:552    .text:000000000000019c .L0 
     /tmp/ccRzSJoQ.s:553    .text:000000000000019c .L0 
     /tmp/ccRzSJoQ.s:554    .text:000000000000019c .L0 
     /tmp/ccRzSJoQ.s:555    .text:000000000000019c .L0 
       src/riscv.cpp:46     .text:000000000000019c .L0 
     /tmp/ccRzSJoQ.s:561    .text:00000000000001a0 .L0 
       src/riscv.cpp:47     .text:00000000000001a0 .L0 
     /tmp/ccRzSJoQ.s:567    .text:00000000000001a4 .L0 
       src/riscv.cpp:49     .text:00000000000001a4 .L0 
     /tmp/ccRzSJoQ.s:572    .text:00000000000001a8 .L0 
       src/riscv.cpp:50     .text:00000000000001a8 .L0 
     /tmp/ccRzSJoQ.s:578    .text:00000000000001ac .L0 
       src/riscv.cpp:52     .text:00000000000001ac .L0 
     /tmp/ccRzSJoQ.s:583    .text:00000000000001b0 .L0 
       src/riscv.cpp:53     .text:00000000000001b0 .L0 
     /tmp/ccRzSJoQ.s:589    .text:00000000000001b4 .L0 
       src/riscv.cpp:55     .text:00000000000001b4 .L0 
     /tmp/ccRzSJoQ.s:594    .text:00000000000001b8 .L0 
       src/riscv.cpp:56     .text:00000000000001b8 .L0 
     /tmp/ccRzSJoQ.s:600    .text:00000000000001bc .L0 
     /tmp/ccRzSJoQ.s:602    .text:00000000000001bc .L0 
     /tmp/ccRzSJoQ.s:610    .text:00000000000001c4 .L0 
     /tmp/ccRzSJoQ.s:611    .text:00000000000001c4 .L0 
     /tmp/ccRzSJoQ.s:616    .text:00000000000001c8 .L0 
  src/../h/riscv.hpp:182    .text:00000000000001c8 .L0 
     /tmp/ccRzSJoQ.s:626    .text:00000000000001cc .L0 
     /tmp/ccRzSJoQ.s:627    .text:00000000000001cc .L0 
     /tmp/ccRzSJoQ.s:632    .text:00000000000001d0 .L0 
  src/../h/riscv.hpp:114    .text:00000000000001d0 .L0 
     /tmp/ccRzSJoQ.s:645    .text:00000000000001d4 .L0 
     /tmp/ccRzSJoQ.s:646    .text:00000000000001d8 .L0 
     /tmp/ccRzSJoQ.s:647    .text:00000000000001d8 .L0 
     /tmp/ccRzSJoQ.s:649    .text:00000000000001dc .L0 
     /tmp/ccRzSJoQ.s:650    .text:00000000000001dc .L0 
     /tmp/ccRzSJoQ.s:652    .text:00000000000001e0 .L0 
     /tmp/ccRzSJoQ.s:654    .text:00000000000001e4 .L0 
     /tmp/ccRzSJoQ.s:656    .text:00000000000001e8 .L0 
     /tmp/ccRzSJoQ.s:658    .text:00000000000001ec .L0 
     /tmp/ccRzSJoQ.s:660    .text:00000000000001f0 .L0 
     /tmp/ccRzSJoQ.s:664    .text:00000000000001f4 .L0 
     /tmp/ccRzSJoQ.s:672    .text:00000000000001f4 .L0 
     /tmp/ccRzSJoQ.s:673    .text:00000000000001f4 .L0 
     /tmp/ccRzSJoQ.s:681    .text:0000000000000200 .L0 
     /tmp/ccRzSJoQ.s:682    .text:0000000000000200 .L0 
     /tmp/ccRzSJoQ.s:688    .text:0000000000000208 .L0 
     /tmp/ccRzSJoQ.s:689    .text:0000000000000208 .L0 
     /tmp/ccRzSJoQ.s:692    .text:0000000000000210 .L0 
     /tmp/ccRzSJoQ.s:693    .text:0000000000000210 .L0 
     /tmp/ccRzSJoQ.s:698    .text:0000000000000214 .L0 
  src/../h/riscv.hpp:182    .text:0000000000000214 .L0 
     /tmp/ccRzSJoQ.s:708    .text:0000000000000218 .L0 
     /tmp/ccRzSJoQ.s:709    .text:0000000000000218 .L0 
GAS LISTING /tmp/ccRzSJoQ.s 			page 41


     /tmp/ccRzSJoQ.s:714    .text:000000000000021c .L0 
  src/../h/riscv.hpp:114    .text:000000000000021c .L0 
     /tmp/ccRzSJoQ.s:721    .text:0000000000000220 .L0 
     /tmp/ccRzSJoQ.s:728    .text:0000000000000224 .L0 
     /tmp/ccRzSJoQ.s:729    .text:0000000000000224 .L0 
     /tmp/ccRzSJoQ.s:733    .text:0000000000000230 .L0 
     /tmp/ccRzSJoQ.s:734    .text:0000000000000230 .L0 
     /tmp/ccRzSJoQ.s:737    .text:0000000000000238 .L0 
     /tmp/ccRzSJoQ.s:738    .text:0000000000000238 .L0 
     /tmp/ccRzSJoQ.s:743    .text:000000000000023c .L0 
  src/../h/riscv.hpp:182    .text:000000000000023c .L0 
     /tmp/ccRzSJoQ.s:753    .text:0000000000000240 .L0 
     /tmp/ccRzSJoQ.s:754    .text:0000000000000240 .L0 
     /tmp/ccRzSJoQ.s:759    .text:0000000000000244 .L0 
  src/../h/riscv.hpp:114    .text:0000000000000244 .L0 
     /tmp/ccRzSJoQ.s:766    .text:0000000000000248 .L0 
     /tmp/ccRzSJoQ.s:778    .text:000000000000024c .L0 
     /tmp/ccRzSJoQ.s:779    .text:000000000000024c .L0 
     /tmp/ccRzSJoQ.s:780    .text:000000000000024c .L0 
     /tmp/ccRzSJoQ.s:784    .text:000000000000025c .L0 
       src/riscv.cpp:91     .text:000000000000025c .L0 
     /tmp/ccRzSJoQ.s:790    .text:0000000000000260 .L0 
       src/riscv.cpp:92     .text:0000000000000260 .L0 
     /tmp/ccRzSJoQ.s:796    .text:0000000000000264 .L0 
     /tmp/ccRzSJoQ.s:798    .text:0000000000000264 .L0 
     /tmp/ccRzSJoQ.s:802    .text:0000000000000274 .L0 
     /tmp/ccRzSJoQ.s:803    .text:0000000000000274 .L0 
     /tmp/ccRzSJoQ.s:807    .text:0000000000000280 .L0 
     /tmp/ccRzSJoQ.s:808    .text:0000000000000280 .L0 
     /tmp/ccRzSJoQ.s:812    .text:0000000000000290 .L0 
     /tmp/ccRzSJoQ.s:816    .text:0000000000000294 .L0 
     /tmp/ccRzSJoQ.s:817    .text:0000000000000294 .L0 
     /tmp/ccRzSJoQ.s:820    .text:00000000000002a0 .L0 
     /tmp/ccRzSJoQ.s:821    .text:00000000000002a0 .L0 
     /tmp/ccRzSJoQ.s:829    .text:00000000000002ac .L0 
     /tmp/ccRzSJoQ.s:830    .text:00000000000002ac .L0 
     /tmp/ccRzSJoQ.s:836    .text:00000000000002b8 .L0 
     /tmp/ccRzSJoQ.s:837    .text:00000000000002b8 .L0 
     /tmp/ccRzSJoQ.s:845    .text:00000000000002c0 .L0 
     /tmp/ccRzSJoQ.s:847    .text:00000000000002c0 .L0 
     /tmp/ccRzSJoQ.s:848    .text:00000000000002c0 .L0 
     /tmp/ccRzSJoQ.s:850    .text:00000000000002c8 .L0 
     /tmp/ccRzSJoQ.s:853    .text:00000000000002cc .L0 
     /tmp/ccRzSJoQ.s:858    .text:00000000000002d4 .L0 
     /tmp/ccRzSJoQ.s:859    .text:00000000000002d4 .L0 
     /tmp/ccRzSJoQ.s:865    .text:00000000000002e0 .L0 
     /tmp/ccRzSJoQ.s:872    .text:00000000000002ec .L0 
     /tmp/ccRzSJoQ.s:875    .text:00000000000002f8 .L0 
     /tmp/ccRzSJoQ.s:876    .text:00000000000002f8 .L0 
     /tmp/ccRzSJoQ.s:882    .text:0000000000000300 .L0 
     /tmp/ccRzSJoQ.s:883    .text:0000000000000300 .L0 
     /tmp/ccRzSJoQ.s:886    .text:0000000000000304 .L0 
     /tmp/ccRzSJoQ.s:887    .text:0000000000000304 .L0 
     /tmp/ccRzSJoQ.s:888    .text:0000000000000304 .L0 
     /tmp/ccRzSJoQ.s:890    .text:0000000000000308 .L0 
     /tmp/ccRzSJoQ.s:894    .text:000000000000030c .L0 
     /tmp/ccRzSJoQ.s:895    .text:000000000000030c .L0 
GAS LISTING /tmp/ccRzSJoQ.s 			page 42


     /tmp/ccRzSJoQ.s:896    .text:000000000000030c .L0 
     /tmp/ccRzSJoQ.s:898    .text:0000000000000314 .L0 
     /tmp/ccRzSJoQ.s:900    .text:0000000000000318 .L0 
     /tmp/ccRzSJoQ.s:902    .text:000000000000031c .L0 
     /tmp/ccRzSJoQ.s:906    .text:0000000000000320 .L0 
     /tmp/ccRzSJoQ.s:909    .text:0000000000000324 .L0 
     /tmp/ccRzSJoQ.s:910    .text:0000000000000324 .L0 
     /tmp/ccRzSJoQ.s:916    .text:0000000000000330 .L0 
     /tmp/ccRzSJoQ.s:923    .text:000000000000033c .L0 
     /tmp/ccRzSJoQ.s:924    .text:000000000000033c .L0 
     /tmp/ccRzSJoQ.s:927    .text:0000000000000340 .L0 
     /tmp/ccRzSJoQ.s:928    .text:0000000000000340 .L0 
     /tmp/ccRzSJoQ.s:930    .text:0000000000000344 .L0 
     /tmp/ccRzSJoQ.s:931    .text:0000000000000344 .L0 
     /tmp/ccRzSJoQ.s:935    .text:0000000000000350 .L0 
     /tmp/ccRzSJoQ.s:936    .text:0000000000000350 .L0 
     /tmp/ccRzSJoQ.s:939    .text:0000000000000354 .L0 
     /tmp/ccRzSJoQ.s:981    .text:0000000000000358 .L0 
     /tmp/ccRzSJoQ.s:982    .text:0000000000000358 .L0 
     /tmp/ccRzSJoQ.s:984    .text:000000000000035c .L0 
     /tmp/ccRzSJoQ.s:987    .text:0000000000000360 .L0 
     /tmp/ccRzSJoQ.s:988    .text:0000000000000360 .L0 
     /tmp/ccRzSJoQ.s:992    .text:000000000000036c .L0 
     /tmp/ccRzSJoQ.s:995    .text:0000000000000378 .L0 
     /tmp/ccRzSJoQ.s:997    .text:000000000000037c .L0 
     /tmp/ccRzSJoQ.s:1002   .text:0000000000000380 .L0 
     /tmp/ccRzSJoQ.s:1009   .text:000000000000038c .L0 
     /tmp/ccRzSJoQ.s:1010   .text:000000000000038c .L0 
     /tmp/ccRzSJoQ.s:1012   .text:0000000000000390 .L0 
     /tmp/ccRzSJoQ.s:1013   .text:0000000000000390 .L0 
     /tmp/ccRzSJoQ.s:1020   .text:0000000000000398 .L0 
     /tmp/ccRzSJoQ.s:1021   .text:0000000000000398 .L0 
     /tmp/ccRzSJoQ.s:1027   .text:00000000000003a4 .L0 
     /tmp/ccRzSJoQ.s:1036   .text:00000000000003b8 .L0 
     /tmp/ccRzSJoQ.s:1038   .text:00000000000003bc .L0 
     /tmp/ccRzSJoQ.s:1039   .text:00000000000003bc .L0 
     /tmp/ccRzSJoQ.s:1042   .text:00000000000003c0 .L0 
     /tmp/ccRzSJoQ.s:1044   .text:00000000000003c8 .L0 
     /tmp/ccRzSJoQ.s:1052   .text:00000000000003d8 .L0 
     /tmp/ccRzSJoQ.s:1053   .text:00000000000003d8 .L0 
     /tmp/ccRzSJoQ.s:1081   .text:00000000000003e4 .L0 
     /tmp/ccRzSJoQ.s:1082   .text:00000000000003e4 .L0 
     /tmp/ccRzSJoQ.s:1083   .text:00000000000003e4 .L0 
     /tmp/ccRzSJoQ.s:1086   .text:00000000000003ec .L0 
     /tmp/ccRzSJoQ.s:1088   .text:00000000000003f0 .L0 
     /tmp/ccRzSJoQ.s:1089   .text:00000000000003f0 .L0 
     /tmp/ccRzSJoQ.s:1094   .text:00000000000003f4 .L0 
     /tmp/ccRzSJoQ.s:1095   .text:00000000000003f4 .L0 
     /tmp/ccRzSJoQ.s:1102   .text:00000000000003fc .L0 
     /tmp/ccRzSJoQ.s:1103   .text:00000000000003fc .L0 
     /tmp/ccRzSJoQ.s:1104   .text:00000000000003fc .L0 
     /tmp/ccRzSJoQ.s:1105   .text:00000000000003fc .L0 
     /tmp/ccRzSJoQ.s:1115   .text:0000000000000404 .L0 
     /tmp/ccRzSJoQ.s:1116   .text:0000000000000404 .L0 
     /tmp/ccRzSJoQ.s:1120   .text:0000000000000404 .L0 
     /tmp/ccRzSJoQ.s:1121   .text:0000000000000404 .L0 
     /tmp/ccRzSJoQ.s:1127   .text:0000000000000408 .L0 
GAS LISTING /tmp/ccRzSJoQ.s 			page 43


     /tmp/ccRzSJoQ.s:1128   .text:0000000000000408 .L0 
     /tmp/ccRzSJoQ.s:1129   .text:0000000000000408 .L0 
     /tmp/ccRzSJoQ.s:1139   .text:0000000000000410 .L0 
     /tmp/ccRzSJoQ.s:1140   .text:0000000000000410 .L0 
     /tmp/ccRzSJoQ.s:1146   .text:0000000000000424 .L0 
     /tmp/ccRzSJoQ.s:1147   .text:0000000000000424 .L0 
     /tmp/ccRzSJoQ.s:1153   .text:0000000000000430 .L0 
     /tmp/ccRzSJoQ.s:1154   .text:0000000000000430 .L0 
     /tmp/ccRzSJoQ.s:1159   .text:0000000000000434 .L0 
     /tmp/ccRzSJoQ.s:1164   .text:0000000000000438 .L0 
     /tmp/ccRzSJoQ.s:1165   .text:0000000000000438 .L0 
     /tmp/ccRzSJoQ.s:1166   .text:0000000000000438 .L0 
  src/../h/riscv.hpp:108    .text:0000000000000438 .L0 
     /tmp/ccRzSJoQ.s:1174   .text:0000000000000440 .L0 
     /tmp/ccRzSJoQ.s:1175   .text:0000000000000440 .L0 
     /tmp/ccRzSJoQ.s:1179   .text:0000000000000444 .L0 
     /tmp/ccRzSJoQ.s:1183   .text:0000000000000448 .L0 
     /tmp/ccRzSJoQ.s:1184   .text:0000000000000448 .L0 
     /tmp/ccRzSJoQ.s:1185   .text:0000000000000448 .L0 
  src/../h/riscv.hpp:176    .text:0000000000000448 .L0 
     /tmp/ccRzSJoQ.s:1193   .text:0000000000000450 .L0 
     /tmp/ccRzSJoQ.s:1194   .text:0000000000000450 .L0 
     /tmp/ccRzSJoQ.s:1198   .text:0000000000000454 .L0 
     /tmp/ccRzSJoQ.s:1200   .text:0000000000000458 .L0 
     /tmp/ccRzSJoQ.s:1201   .text:0000000000000458 .L0 
     /tmp/ccRzSJoQ.s:1204   .text:0000000000000464 .L0 
     /tmp/ccRzSJoQ.s:1205   .text:0000000000000464 .L0 
     /tmp/ccRzSJoQ.s:1208   .text:000000000000046c .L0 
     /tmp/ccRzSJoQ.s:1209   .text:000000000000046c .L0 
     /tmp/ccRzSJoQ.s:1214   .text:0000000000000470 .L0 
  src/../h/riscv.hpp:182    .text:0000000000000470 .L0 
     /tmp/ccRzSJoQ.s:1224   .text:0000000000000474 .L0 
     /tmp/ccRzSJoQ.s:1225   .text:0000000000000474 .L0 
     /tmp/ccRzSJoQ.s:1230   .text:0000000000000478 .L0 
  src/../h/riscv.hpp:114    .text:0000000000000478 .L0 
     /tmp/ccRzSJoQ.s:1237   .text:000000000000047c .L0 
     /tmp/ccRzSJoQ.s:1248   .text:0000000000000480 .L0 
     /tmp/ccRzSJoQ.s:1249   .text:0000000000000480 .L0 
     /tmp/ccRzSJoQ.s:1252   .text:0000000000000488 .L0 
     /tmp/ccRzSJoQ.s:1253   .text:0000000000000488 .L0 
     /tmp/ccRzSJoQ.s:1258   .text:000000000000048c .L0 
     /tmp/ccRzSJoQ.s:1259   .text:000000000000048c .L0 
     /tmp/ccRzSJoQ.s:1264   .text:0000000000000490 .L0 
     /tmp/ccRzSJoQ.s:1265   .text:0000000000000490 .L0 
     /tmp/ccRzSJoQ.s:1269   .text:000000000000049c .L0 
     /tmp/ccRzSJoQ.s:1270   .text:000000000000049c .L0 
     /tmp/ccRzSJoQ.s:1275   .text:00000000000004a0 .L0 
     /tmp/ccRzSJoQ.s:1276   .text:00000000000004a0 .L0 
     /tmp/ccRzSJoQ.s:1277   .text:00000000000004a0 .L0 
     /tmp/ccRzSJoQ.s:1279   .text:00000000000004a8 .L0 
     /tmp/ccRzSJoQ.s:1281   .text:00000000000004ac .L0 
     /tmp/ccRzSJoQ.s:1283   .text:00000000000004b0 .L0 
     /tmp/ccRzSJoQ.s:1287   .text:00000000000004b4 .L0 
     /tmp/ccRzSJoQ.s:1288   .text:00000000000004b4 .L0 
     /tmp/ccRzSJoQ.s:1289   .text:00000000000004b4 .L0 
     /tmp/ccRzSJoQ.s:1291   .text:00000000000004b8 .L0 
     /tmp/ccRzSJoQ.s:1293   .text:00000000000004c0 .L0 
GAS LISTING /tmp/ccRzSJoQ.s 			page 44


     /tmp/ccRzSJoQ.s:1297   .text:00000000000004c8 .L0 
     /tmp/ccRzSJoQ.s:1307   .text:00000000000004d8 .L0 
     /tmp/ccRzSJoQ.s:1312   .text:00000000000004d8 _GLOBAL__sub_I__ZN5Riscv15sleepingThreadsE
     /tmp/ccRzSJoQ.s:1315   .text:00000000000004d8 .L0 
     /tmp/ccRzSJoQ.s:1316   .text:00000000000004d8 .L0 
     /tmp/ccRzSJoQ.s:1317   .text:00000000000004dc .L0 
     /tmp/ccRzSJoQ.s:1320   .text:00000000000004e4 .L0 
     /tmp/ccRzSJoQ.s:1321   .text:00000000000004e4 .L0 
     /tmp/ccRzSJoQ.s:1323   .text:00000000000004e8 .L0 
     /tmp/ccRzSJoQ.s:1325   .text:00000000000004e8 .L0 
     /tmp/ccRzSJoQ.s:1331   .text:0000000000000500 .L0 
     /tmp/ccRzSJoQ.s:1333   .text:0000000000000504 .L0 
     /tmp/ccRzSJoQ.s:1334   .text:0000000000000504 .L0 
     /tmp/ccRzSJoQ.s:1336   .text:0000000000000508 .L0 
     /tmp/ccRzSJoQ.s:1338   .text:000000000000050c .L0 
     /tmp/ccRzSJoQ.s:1350   .bss:0000000000000000 _ZN5Riscv15sleepingThreadsE
     /tmp/ccRzSJoQ.s:1347   .bss:0000000000000000 .LANCHOR0
     /tmp/ccRzSJoQ.s:1360   .text:000000000000050c .L0 
     /tmp/ccRzSJoQ.s:43     .text:000000000000002c .L0 
     /tmp/ccRzSJoQ.s:498    .text:0000000000000174 .L0 
     /tmp/ccRzSJoQ.s:673    .text:00000000000001f4 .L0 
     /tmp/ccRzSJoQ.s:729    .text:0000000000000224 .L0 
     /tmp/ccRzSJoQ.s:92     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccRzSJoQ.s:780    .text:000000000000024c .L0 
     /tmp/ccRzSJoQ.s:95     .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccRzSJoQ.s:798    .text:0000000000000264 .L0 
     /tmp/ccRzSJoQ.s:98     .rodata.str1.8:0000000000000020 .LC2
     /tmp/ccRzSJoQ.s:808    .text:0000000000000280 .L0 
     /tmp/ccRzSJoQ.s:817    .text:0000000000000294 .L0 
     /tmp/ccRzSJoQ.s:830    .text:00000000000002ac .L0 
     /tmp/ccRzSJoQ.s:848    .text:00000000000002c0 .L0 
     /tmp/ccRzSJoQ.s:872    .text:00000000000002ec .L0 
     /tmp/ccRzSJoQ.s:896    .text:000000000000030c .L0 
     /tmp/ccRzSJoQ.s:992    .text:000000000000036c .L0 
     /tmp/ccRzSJoQ.s:1029   .text:00000000000003a8 .L0 
     /tmp/ccRzSJoQ.s:1042   .text:00000000000003c0 .L0 
     /tmp/ccRzSJoQ.s:1053   .text:00000000000003d8 .L0 
     /tmp/ccRzSJoQ.s:1083   .text:00000000000003e4 .L0 
     /tmp/ccRzSJoQ.s:1140   .text:0000000000000410 .L0 
     /tmp/ccRzSJoQ.s:1147   .text:0000000000000424 .L0 
     /tmp/ccRzSJoQ.s:1201   .text:0000000000000458 .L0 
     /tmp/ccRzSJoQ.s:1249   .text:0000000000000480 .L0 
     /tmp/ccRzSJoQ.s:1277   .text:00000000000004a0 .L0 
     /tmp/ccRzSJoQ.s:1291   .text:00000000000004b8 .L0 
     /tmp/ccRzSJoQ.s:31     .text:0000000000000020 .L4
     /tmp/ccRzSJoQ.s:23     .text:0000000000000014 .L1
     /tmp/ccRzSJoQ.s:172    .text:00000000000000c4 .L31
     /tmp/ccRzSJoQ.s:1056   .text:00000000000003e4 .L32
     /tmp/ccRzSJoQ.s:639    .text:00000000000001d4 .L7
     /tmp/ccRzSJoQ.s:604    .text:00000000000001c4 .L9
     /tmp/ccRzSJoQ.s:536    .text:000000000000019c .L33
     /tmp/ccRzSJoQ.s:663    .text:00000000000001f4 .L34
     /tmp/ccRzSJoQ.s:723    .text:0000000000000224 .L35
     /tmp/ccRzSJoQ.s:768    .text:000000000000024c .L36
     /tmp/ccRzSJoQ.s:826    .text:00000000000002ac .L37
     /tmp/ccRzSJoQ.s:855    .text:00000000000002d4 .L38
     /tmp/ccRzSJoQ.s:892    .text:000000000000030c .L15
GAS LISTING /tmp/ccRzSJoQ.s 			page 45


     /tmp/ccRzSJoQ.s:814    .text:0000000000000294 .L14
     /tmp/ccRzSJoQ.s:903    .text:0000000000000320 .L17
     /tmp/ccRzSJoQ.s:879    .text:0000000000000300 .L39
     /tmp/ccRzSJoQ.s:941    .text:0000000000000358 .L40
     /tmp/ccRzSJoQ.s:925    .text:0000000000000340 .L22
     /tmp/ccRzSJoQ.s:1017   .text:0000000000000398 .L19
     /tmp/ccRzSJoQ.s:1050   .text:00000000000003d8 .L20
     /tmp/ccRzSJoQ.s:1040   .text:00000000000003c0 .L21
     /tmp/ccRzSJoQ.s:1123   .text:0000000000000408 .L25
     /tmp/ccRzSJoQ.s:1272   .text:00000000000004a0 .L27
     /tmp/ccRzSJoQ.s:1295   .text:00000000000004c8 .L41
     /tmp/ccRzSJoQ.s:1250   .text:0000000000000488 .L26
     /tmp/ccRzSJoQ.s:1239   .text:0000000000000480 .L42
     /tmp/ccRzSJoQ.s:3440   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccRzSJoQ.s:5598   .debug_str:000000000000087e .LASF161
     /tmp/ccRzSJoQ.s:5520   .debug_str:0000000000000609 .LASF162
     /tmp/ccRzSJoQ.s:5376   .debug_str:00000000000001b5 .LASF163
     /tmp/ccRzSJoQ.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccRzSJoQ.s:1353   .text:000000000000050c .Letext0
     /tmp/ccRzSJoQ.s:5308   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccRzSJoQ.s:5490   .debug_str:0000000000000535 .LASF0
     /tmp/ccRzSJoQ.s:5514   .debug_str:00000000000005db .LASF1
     /tmp/ccRzSJoQ.s:5462   .debug_str:000000000000045e .LASF2
     /tmp/ccRzSJoQ.s:5432   .debug_str:0000000000000398 .LASF4
     /tmp/ccRzSJoQ.s:5570   .debug_str:0000000000000783 .LASF3
     /tmp/ccRzSJoQ.s:5344   .debug_str:00000000000000bb .LASF5
     /tmp/ccRzSJoQ.s:5384   .debug_str:0000000000000207 .LASF6
     /tmp/ccRzSJoQ.s:5518   .debug_str:00000000000005f6 .LASF7
     /tmp/ccRzSJoQ.s:5488   .debug_str:0000000000000522 .LASF8
     /tmp/ccRzSJoQ.s:5610   .debug_str:000000000000097b .LASF9
     /tmp/ccRzSJoQ.s:5418   .debug_str:00000000000002ff .LASF10
     /tmp/ccRzSJoQ.s:5536   .debug_str:00000000000006a1 .LASF11
     /tmp/ccRzSJoQ.s:5600   .debug_str:0000000000000942 .LASF12
     /tmp/ccRzSJoQ.s:5348   .debug_str:00000000000000cd .LASF13
     /tmp/ccRzSJoQ.s:5316   .debug_str:0000000000000017 .LASF14
     /tmp/ccRzSJoQ.s:5364   .debug_str:000000000000016d .LASF15
     /tmp/ccRzSJoQ.s:5558   .debug_str:000000000000073d .LASF16
     /tmp/ccRzSJoQ.s:5378   .debug_str:00000000000001d8 .LASF17
     /tmp/ccRzSJoQ.s:5534   .debug_str:0000000000000697 .LASF18
     /tmp/ccRzSJoQ.s:5406   .debug_str:00000000000002af .LASF47
     /tmp/ccRzSJoQ.s:5428   .debug_str:000000000000035c .LASF164
     /tmp/ccRzSJoQ.s:5360   .debug_str:000000000000014b .LASF165
     /tmp/ccRzSJoQ.s:5450   .debug_str:000000000000040d .LASF166
     /tmp/ccRzSJoQ.s:5326   .debug_str:0000000000000049 .LASF54
     /tmp/ccRzSJoQ.s:5390   .debug_str:0000000000000238 .LASF19
     /tmp/ccRzSJoQ.s:5546   .debug_str:000000000000070a .LASF21
     /tmp/ccRzSJoQ.s:5522   .debug_str:0000000000000617 .LASF25
     /tmp/ccRzSJoQ.s:5416   .debug_str:00000000000002e8 .LASF27
     /tmp/ccRzSJoQ.s:5464   .debug_str:000000000000046c .LASF20
     /tmp/ccRzSJoQ.s:5648   .debug_str:0000000000000a7b .LASF22
     /tmp/ccRzSJoQ.s:5394   .debug_str:0000000000000246 .LASF23
     /tmp/ccRzSJoQ.s:5402   .debug_str:0000000000000293 .LASF24
     /tmp/ccRzSJoQ.s:5480   .debug_str:00000000000004da .LASF26
     /tmp/ccRzSJoQ.s:5388   .debug_str:0000000000000221 .LASF28
     /tmp/ccRzSJoQ.s:5452   .debug_str:0000000000000417 .LASF29
     /tmp/ccRzSJoQ.s:5340   .debug_str:000000000000009a .LASF30
     /tmp/ccRzSJoQ.s:5442   .debug_str:00000000000003c8 .LASF31
GAS LISTING /tmp/ccRzSJoQ.s 			page 46


     /tmp/ccRzSJoQ.s:5400   .debug_str:000000000000026f .LASF32
     /tmp/ccRzSJoQ.s:5550   .debug_str:000000000000071e .LASF167
     /tmp/ccRzSJoQ.s:5560   .debug_str:0000000000000753 .LASF77
     /tmp/ccRzSJoQ.s:5474   .debug_str:0000000000000499 .LASF79
     /tmp/ccRzSJoQ.s:5590   .debug_str:0000000000000835 .LASF33
     /tmp/ccRzSJoQ.s:5526   .debug_str:0000000000000645 .LASF34
     /tmp/ccRzSJoQ.s:5396   .debug_str:0000000000000252 .LASF35
     /tmp/ccRzSJoQ.s:5422   .debug_str:0000000000000323 .LASF71
     /tmp/ccRzSJoQ.s:5436   .debug_str:00000000000003a8 .LASF36
     /tmp/ccRzSJoQ.s:5368   .debug_str:000000000000017e .LASF37
     /tmp/ccRzSJoQ.s:5440   .debug_str:00000000000003c0 .LASF38
     /tmp/ccRzSJoQ.s:5506   .debug_str:00000000000005b7 .LASF39
     /tmp/ccRzSJoQ.s:5434   .debug_str:000000000000039f .LASF40
     /tmp/ccRzSJoQ.s:5538   .debug_str:00000000000006b0 .LASF41
     /tmp/ccRzSJoQ.s:5456   .debug_str:0000000000000437 .LASF43
     /tmp/ccRzSJoQ.s:5424   .debug_str:0000000000000338 .LASF45
     /tmp/ccRzSJoQ.s:5618   .debug_str:00000000000009ae .LASF42
     /tmp/ccRzSJoQ.s:5430   .debug_str:0000000000000370 .LASF59
     /tmp/ccRzSJoQ.s:5494   .debug_str:0000000000000549 .LASF44
     /tmp/ccRzSJoQ.s:5454   .debug_str:0000000000000424 .LASF46
     /tmp/ccRzSJoQ.s:5572   .debug_str:0000000000000795 .LASF48
     /tmp/ccRzSJoQ.s:5446   .debug_str:00000000000003e0 .LASF49
     /tmp/ccRzSJoQ.s:5426   .debug_str:0000000000000351 .LASF50
     /tmp/ccRzSJoQ.s:5404   .debug_str:00000000000002aa .LASF51
     /tmp/ccRzSJoQ.s:5310   .debug_str:0000000000000000 .LASF52
     /tmp/ccRzSJoQ.s:5438   .debug_str:00000000000003ad .LASF53
     /tmp/ccRzSJoQ.s:5602   .debug_str:0000000000000951 .LASF55
     /tmp/ccRzSJoQ.s:5552   .debug_str:0000000000000723 .LASF56
     /tmp/ccRzSJoQ.s:5646   .debug_str:0000000000000a76 .LASF57
     /tmp/ccRzSJoQ.s:5626   .debug_str:00000000000009fd .LASF58
     /tmp/ccRzSJoQ.s:5580   .debug_str:00000000000007d0 .LASF60
     /tmp/ccRzSJoQ.s:5382   .debug_str:0000000000000202 .LASF61
     /tmp/ccRzSJoQ.s:5470   .debug_str:000000000000048a .LASF62
     /tmp/ccRzSJoQ.s:5358   .debug_str:000000000000012f .LASF63
     /tmp/ccRzSJoQ.s:5486   .debug_str:0000000000000503 .LASF64
     /tmp/ccRzSJoQ.s:5636   .debug_str:0000000000000a3f .LASF168
     /tmp/ccRzSJoQ.s:5352   .debug_str:00000000000000ec .LASF169
     /tmp/ccRzSJoQ.s:5612   .debug_str:000000000000098b .LASF65
     /tmp/ccRzSJoQ.s:5504   .debug_str:0000000000000594 .LASF66
     /tmp/ccRzSJoQ.s:5408   .debug_str:00000000000002c0 .LASF67
     /tmp/ccRzSJoQ.s:5478   .debug_str:00000000000004b0 .LASF68
     /tmp/ccRzSJoQ.s:5482   .debug_str:00000000000004e5 .LASF69
     /tmp/ccRzSJoQ.s:5496   .debug_str:0000000000000552 .LASF70
     /tmp/ccRzSJoQ.s:5524   .debug_str:0000000000000622 .LASF72
     /tmp/ccRzSJoQ.s:5510   .debug_str:00000000000005ca .LASF73
     /tmp/ccRzSJoQ.s:5444   .debug_str:00000000000003d5 .LASF170
     /tmp/ccRzSJoQ.s:5582   .debug_str:00000000000007fa .LASF74
     /tmp/ccRzSJoQ.s:5508   .debug_str:00000000000005c1 .LASF75
     /tmp/ccRzSJoQ.s:5620   .debug_str:00000000000009bc .LASF76
     /tmp/ccRzSJoQ.s:5554   .debug_str:0000000000000728 .LASF78
     /tmp/ccRzSJoQ.s:5634   .debug_str:0000000000000a27 .LASF80
     /tmp/ccRzSJoQ.s:5318   .debug_str:0000000000000027 .LASF81
     /tmp/ccRzSJoQ.s:5398   .debug_str:000000000000025a .LASF84
     /tmp/ccRzSJoQ.s:5392   .debug_str:000000000000023d .LASF82
     /tmp/ccRzSJoQ.s:5372   .debug_str:000000000000018c .LASF87
     /tmp/ccRzSJoQ.s:5574   .debug_str:00000000000007a6 .LASF83
     /tmp/ccRzSJoQ.s:5542   .debug_str:00000000000006e3 .LASF85
GAS LISTING /tmp/ccRzSJoQ.s 			page 47


     /tmp/ccRzSJoQ.s:5596   .debug_str:0000000000000877 .LASF86
     /tmp/ccRzSJoQ.s:5588   .debug_str:0000000000000822 .LASF88
     /tmp/ccRzSJoQ.s:5516   .debug_str:00000000000005ee .LASF89
     /tmp/ccRzSJoQ.s:5380   .debug_str:00000000000001ee .LASF90
     /tmp/ccRzSJoQ.s:5314   .debug_str:000000000000000f .LASF91
     /tmp/ccRzSJoQ.s:5576   .debug_str:00000000000007ad .LASF92
     /tmp/ccRzSJoQ.s:5342   .debug_str:00000000000000b3 .LASF93
     /tmp/ccRzSJoQ.s:5544   .debug_str:00000000000006f6 .LASF94
     /tmp/ccRzSJoQ.s:5562   .debug_str:0000000000000759 .LASF95
     /tmp/ccRzSJoQ.s:5374   .debug_str:00000000000001a1 .LASF96
     /tmp/ccRzSJoQ.s:5492   .debug_str:0000000000000542 .LASF97
     /tmp/ccRzSJoQ.s:5630   .debug_str:0000000000000a0f .LASF98
     /tmp/ccRzSJoQ.s:5336   .debug_str:0000000000000088 .LASF99
     /tmp/ccRzSJoQ.s:5650   .debug_str:0000000000000a92 .LASF100
     /tmp/ccRzSJoQ.s:5412   .debug_str:00000000000002dd .LASF101
     /tmp/ccRzSJoQ.s:5594   .debug_str:0000000000000865 .LASF102
     /tmp/ccRzSJoQ.s:5332   .debug_str:0000000000000072 .LASF103
     /tmp/ccRzSJoQ.s:5652   .debug_str:0000000000000aa5 .LASF104
     /tmp/ccRzSJoQ.s:5644   .debug_str:0000000000000a6b .LASF105
     /tmp/ccRzSJoQ.s:5566   .debug_str:0000000000000766 .LASF106
     /tmp/ccRzSJoQ.s:5512   .debug_str:00000000000005d0 .LASF107
     /tmp/ccRzSJoQ.s:5584   .debug_str:0000000000000803 .LASF108
     /tmp/ccRzSJoQ.s:5362   .debug_str:0000000000000163 .LASF109
     /tmp/ccRzSJoQ.s:5532   .debug_str:0000000000000681 .LASF110
     /tmp/ccRzSJoQ.s:5472   .debug_str:000000000000048f .LASF111
     /tmp/ccRzSJoQ.s:5420   .debug_str:000000000000030d .LASF112
     /tmp/ccRzSJoQ.s:5578   .debug_str:00000000000007c1 .LASF113
     /tmp/ccRzSJoQ.s:5354   .debug_str:000000000000010b .LASF114
     /tmp/ccRzSJoQ.s:5614   .debug_str:0000000000000994 .LASF115
     /tmp/ccRzSJoQ.s:5448   .debug_str:00000000000003eb .LASF116
     /tmp/ccRzSJoQ.s:5334   .debug_str:0000000000000078 .LASF117
     /tmp/ccRzSJoQ.s:5468   .debug_str:0000000000000481 .LASF118
     /tmp/ccRzSJoQ.s:5356   .debug_str:0000000000000127 .LASF119
     /tmp/ccRzSJoQ.s:5606   .debug_str:0000000000000968 .LASF120
     /tmp/ccRzSJoQ.s:5338   .debug_str:000000000000008f .LASF121
     /tmp/ccRzSJoQ.s:5350   .debug_str:00000000000000dd .LASF122
     /tmp/ccRzSJoQ.s:5484   .debug_str:00000000000004fb .LASF123
     /tmp/ccRzSJoQ.s:5466   .debug_str:0000000000000478 .LASF124
     /tmp/ccRzSJoQ.s:5370   .debug_str:0000000000000184 .LASF125
     /tmp/ccRzSJoQ.s:5556   .debug_str:0000000000000733 .LASF126
     /tmp/ccRzSJoQ.s:5460   .debug_str:0000000000000454 .LASF127
     /tmp/ccRzSJoQ.s:5330   .debug_str:000000000000006d .LASF128
     /tmp/ccRzSJoQ.s:5414   .debug_str:00000000000002e3 .LASF129
     /tmp/ccRzSJoQ.s:5328   .debug_str:0000000000000051 .LASF171
     /tmp/ccRzSJoQ.s:5622   .debug_str:00000000000009c5 .LASF130
     /tmp/ccRzSJoQ.s:1313   .text:00000000000004d8 .LFB49
     /tmp/ccRzSJoQ.s:1339   .text:000000000000050c .LFE49
     /tmp/ccRzSJoQ.s:1329   .text:00000000000004fc .LVL88
     /tmp/ccRzSJoQ.s:5540   .debug_str:00000000000006b9 .LASF131
     /tmp/ccRzSJoQ.s:9      .text:0000000000000000 .LFB48
     /tmp/ccRzSJoQ.s:53     .text:0000000000000040 .LFE48
     /tmp/ccRzSJoQ.s:5458   .debug_str:0000000000000445 .LASF132
     /tmp/ccRzSJoQ.s:5346   .debug_str:00000000000000c2 .LASF133
     /tmp/ccRzSJoQ.s:38     .text:000000000000002c .LBB96
     /tmp/ccRzSJoQ.s:49     .text:000000000000003c .LBE96
     /tmp/ccRzSJoQ.s:4712   .debug_loc:0000000000000000 .LLST0
     /tmp/ccRzSJoQ.s:105    .text:0000000000000060 .LFB47
GAS LISTING /tmp/ccRzSJoQ.s 			page 48


     /tmp/ccRzSJoQ.s:1308   .text:00000000000004d8 .LFE47
     /tmp/ccRzSJoQ.s:5320   .debug_str:0000000000000030 .LASF134
     /tmp/ccRzSJoQ.s:4721   .debug_loc:000000000000002c .LLST1
     /tmp/ccRzSJoQ.s:5242   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccRzSJoQ.s:5616   .debug_str:00000000000009a9 .LASF135
     /tmp/ccRzSJoQ.s:5548   .debug_str:0000000000000716 .LASF136
     /tmp/ccRzSJoQ.s:5502   .debug_str:000000000000058f .LASF137
     /tmp/ccRzSJoQ.s:4772   .debug_loc:00000000000000f3 .LLST13
     /tmp/ccRzSJoQ.s:549    .text:000000000000019c .LBB334
     /tmp/ccRzSJoQ.s:605    .text:00000000000001c4 .LBE334
     /tmp/ccRzSJoQ.s:5410   .debug_str:00000000000002cf .LASF138
     /tmp/ccRzSJoQ.s:4795   .debug_loc:0000000000000162 .LLST49
     /tmp/ccRzSJoQ.s:5498   .debug_str:0000000000000583 .LASF139
     /tmp/ccRzSJoQ.s:4802   .debug_loc:0000000000000185 .LLST50
     /tmp/ccRzSJoQ.s:4814   .debug_loc:00000000000001bc .LLST51
     /tmp/ccRzSJoQ.s:5586   .debug_str:000000000000081b .LASF140
     /tmp/ccRzSJoQ.s:4821   .debug_loc:00000000000001df .LLST52
     /tmp/ccRzSJoQ.s:603    .text:00000000000001c4 .LVL18
     /tmp/ccRzSJoQ.s:5312   .debug_str:0000000000000009 .LASF141
     /tmp/ccRzSJoQ.s:4828   .debug_loc:0000000000000202 .LLST16
     /tmp/ccRzSJoQ.s:833    .text:00000000000002b8 .LBB250
     /tmp/ccRzSJoQ.s:841    .text:00000000000002c0 .LBE250
     /tmp/ccRzSJoQ.s:4839   .debug_loc:0000000000000238 .LLST17
     /tmp/ccRzSJoQ.s:4847   .debug_loc:000000000000025c .LLST18
     /tmp/ccRzSJoQ.s:843    .text:00000000000002c0 .LBB252
     /tmp/ccRzSJoQ.s:4854   .debug_loc:000000000000027f .LLST19
     /tmp/ccRzSJoQ.s:4869   .debug_loc:00000000000002c8 .LLST20
     /tmp/ccRzSJoQ.s:4876   .debug_loc:00000000000002eb .LLST21
     /tmp/ccRzSJoQ.s:4885   .debug_loc:0000000000000317 .LLST22
     /tmp/ccRzSJoQ.s:4901   .debug_loc:0000000000000361 .LLST23
     /tmp/ccRzSJoQ.s:907    .text:0000000000000324 .LBB257
     /tmp/ccRzSJoQ.s:942    .text:0000000000000358 .LBE257
     /tmp/ccRzSJoQ.s:4916   .debug_loc:00000000000003aa .LLST24
     /tmp/ccRzSJoQ.s:913    .text:0000000000000330 .LBB258
     /tmp/ccRzSJoQ.s:921    .text:000000000000033c .LBE258
     /tmp/ccRzSJoQ.s:4923   .debug_loc:00000000000003cd .LLST25
     /tmp/ccRzSJoQ.s:4930   .debug_loc:00000000000003f0 .LLST26
     /tmp/ccRzSJoQ.s:4937   .debug_loc:0000000000000413 .LLST27
     /tmp/ccRzSJoQ.s:4944   .debug_loc:0000000000000436 .LLST28
     /tmp/ccRzSJoQ.s:912    .text:0000000000000330 .LVL53
     /tmp/ccRzSJoQ.s:985    .text:0000000000000360 .LBB261
     /tmp/ccRzSJoQ.s:1014   .text:0000000000000394 .LBE261
     /tmp/ccRzSJoQ.s:4951   .debug_loc:0000000000000459 .LLST29
     /tmp/ccRzSJoQ.s:999    .text:0000000000000380 .LBB262
     /tmp/ccRzSJoQ.s:1007   .text:000000000000038c .LBE262
     /tmp/ccRzSJoQ.s:4958   .debug_loc:000000000000047c .LLST30
     /tmp/ccRzSJoQ.s:4965   .debug_loc:000000000000049f .LLST31
     /tmp/ccRzSJoQ.s:4973   .debug_loc:00000000000004c3 .LLST32
     /tmp/ccRzSJoQ.s:4980   .debug_loc:00000000000004e6 .LLST33
     /tmp/ccRzSJoQ.s:990    .text:000000000000036c .LVL57
     /tmp/ccRzSJoQ.s:1018   .text:0000000000000398 .LBB264
     /tmp/ccRzSJoQ.s:1057   .text:00000000000003e4 .LBE264
     /tmp/ccRzSJoQ.s:4987   .debug_loc:0000000000000509 .LLST34
     /tmp/ccRzSJoQ.s:1024   .text:00000000000003a4 .LBB265
     /tmp/ccRzSJoQ.s:1034   .text:00000000000003b8 .LBE265
     /tmp/ccRzSJoQ.s:4994   .debug_loc:000000000000052c .LLST35
     /tmp/ccRzSJoQ.s:5001   .debug_loc:000000000000054f .LLST36
GAS LISTING /tmp/ccRzSJoQ.s 			page 49


     /tmp/ccRzSJoQ.s:5009   .debug_loc:000000000000057a .LLST37
     /tmp/ccRzSJoQ.s:5016   .debug_loc:000000000000059d .LLST38
     /tmp/ccRzSJoQ.s:1023   .text:00000000000003a4 .LVL61
     /tmp/ccRzSJoQ.s:862    .text:00000000000002e0 .LBB268
     /tmp/ccRzSJoQ.s:870    .text:00000000000002ec .LBE268
     /tmp/ccRzSJoQ.s:5023   .debug_loc:00000000000005c0 .LLST39
     /tmp/ccRzSJoQ.s:5030   .debug_loc:00000000000005e3 .LLST40
     /tmp/ccRzSJoQ.s:5038   .debug_loc:0000000000000607 .LLST41
     /tmp/ccRzSJoQ.s:5045   .debug_loc:000000000000062a .LLST42
     /tmp/ccRzSJoQ.s:861    .text:00000000000002e0 .LVL48
     /tmp/ccRzSJoQ.s:782    .text:000000000000025c .LVL38
     /tmp/ccRzSJoQ.s:800    .text:0000000000000274 .LVL40
     /tmp/ccRzSJoQ.s:805    .text:0000000000000280 .LVL41
     /tmp/ccRzSJoQ.s:810    .text:0000000000000290 .LVL42
     /tmp/ccRzSJoQ.s:822    .text:00000000000002a8 .LVL44
     /tmp/ccRzSJoQ.s:454    .text:0000000000000150 .LBB239
     /tmp/ccRzSJoQ.s:539    .text:000000000000019c .LBE239
     /tmp/ccRzSJoQ.s:456    .text:0000000000000150 .LBB240
     /tmp/ccRzSJoQ.s:472    .text:000000000000015c .LBE240
     /tmp/ccRzSJoQ.s:478    .text:0000000000000164 .LBB242
     /tmp/ccRzSJoQ.s:493    .text:0000000000000170 .LBE242
     /tmp/ccRzSJoQ.s:508    .text:000000000000018c .LBB244
     /tmp/ccRzSJoQ.s:519    .text:0000000000000190 .LBE244
     /tmp/ccRzSJoQ.s:5052   .debug_loc:000000000000064d .LLST14
     /tmp/ccRzSJoQ.s:524    .text:0000000000000194 .LBB246
     /tmp/ccRzSJoQ.s:538    .text:000000000000019c .LBE246
     /tmp/ccRzSJoQ.s:5059   .debug_loc:0000000000000670 .LLST15
     /tmp/ccRzSJoQ.s:503    .text:0000000000000188 .LVL9
     /tmp/ccRzSJoQ.s:176    .text:00000000000000c4 .LBB223
     /tmp/ccRzSJoQ.s:191    .text:00000000000000d0 .LBE223
     /tmp/ccRzSJoQ.s:197    .text:00000000000000d8 .LBB225
     /tmp/ccRzSJoQ.s:212    .text:00000000000000e4 .LBE225
     /tmp/ccRzSJoQ.s:740    .text:000000000000023c .LBB305
     /tmp/ccRzSJoQ.s:751    .text:0000000000000240 .LBE305
     /tmp/ccRzSJoQ.s:5066   .debug_loc:0000000000000693 .LLST43
     /tmp/ccRzSJoQ.s:756    .text:0000000000000244 .LBB307
     /tmp/ccRzSJoQ.s:770    .text:000000000000024c .LBE307
     /tmp/ccRzSJoQ.s:5073   .debug_loc:00000000000006b6 .LLST44
     /tmp/ccRzSJoQ.s:677    .text:0000000000000200 .LBB318
     /tmp/ccRzSJoQ.s:686    .text:0000000000000208 .LBE318
     /tmp/ccRzSJoQ.s:5080   .debug_loc:00000000000006d9 .LLST45
     /tmp/ccRzSJoQ.s:5088   .debug_loc:00000000000006fd .LLST46
     /tmp/ccRzSJoQ.s:695    .text:0000000000000214 .LBB320
     /tmp/ccRzSJoQ.s:706    .text:0000000000000218 .LBE320
     /tmp/ccRzSJoQ.s:5095   .debug_loc:0000000000000720 .LLST47
     /tmp/ccRzSJoQ.s:711    .text:000000000000021c .LBB322
     /tmp/ccRzSJoQ.s:725    .text:0000000000000224 .LBE322
     /tmp/ccRzSJoQ.s:5102   .debug_loc:0000000000000743 .LLST48
     /tmp/ccRzSJoQ.s:613    .text:00000000000001c8 .LBB371
     /tmp/ccRzSJoQ.s:624    .text:00000000000001cc .LBE371
     /tmp/ccRzSJoQ.s:5109   .debug_loc:0000000000000766 .LLST53
     /tmp/ccRzSJoQ.s:629    .text:00000000000001d0 .LBB373
     /tmp/ccRzSJoQ.s:641    .text:00000000000001d4 .LBE373
     /tmp/ccRzSJoQ.s:5116   .debug_loc:0000000000000789 .LLST54
     /tmp/ccRzSJoQ.s:690    .text:0000000000000210 .LVL27
     /tmp/ccRzSJoQ.s:735    .text:0000000000000238 .LVL33
     /tmp/ccRzSJoQ.s:5642   .debug_str:0000000000000a66 .LASF142
GAS LISTING /tmp/ccRzSJoQ.s 			page 50


     /tmp/ccRzSJoQ.s:5123   .debug_loc:00000000000007ac .LLST2
     /tmp/ccRzSJoQ.s:5141   .debug_loc:00000000000007f8 .LLST3
     /tmp/ccRzSJoQ.s:1160   .text:0000000000000438 .LBB206
     /tmp/ccRzSJoQ.s:1242   .text:0000000000000480 .LBE206
     /tmp/ccRzSJoQ.s:1162   .text:0000000000000438 .LBB207
     /tmp/ccRzSJoQ.s:1177   .text:0000000000000444 .LBE207
     /tmp/ccRzSJoQ.s:1181   .text:0000000000000448 .LBB209
     /tmp/ccRzSJoQ.s:1196   .text:0000000000000454 .LBE209
     /tmp/ccRzSJoQ.s:1211   .text:0000000000000470 .LBB211
     /tmp/ccRzSJoQ.s:1222   .text:0000000000000474 .LBE211
     /tmp/ccRzSJoQ.s:5156   .debug_loc:0000000000000832 .LLST8
     /tmp/ccRzSJoQ.s:1227   .text:0000000000000478 .LBB213
     /tmp/ccRzSJoQ.s:1241   .text:0000000000000480 .LBE213
     /tmp/ccRzSJoQ.s:5163   .debug_loc:0000000000000855 .LLST9
     /tmp/ccRzSJoQ.s:1206   .text:000000000000046c .LVL77
     /tmp/ccRzSJoQ.s:1079   .text:00000000000003e4 .LBB197
     /tmp/ccRzSJoQ.s:1092   .text:00000000000003f4 .LBE197
     /tmp/ccRzSJoQ.s:5170   .debug_loc:0000000000000878 .LLST4
     /tmp/ccRzSJoQ.s:1100   .text:00000000000003fc .LBB199
     /tmp/ccRzSJoQ.s:1110   .text:0000000000000404 .LBE199
     /tmp/ccRzSJoQ.s:5179   .debug_loc:00000000000008a4 .LLST5
     /tmp/ccRzSJoQ.s:1125   .text:0000000000000408 .LBB201
     /tmp/ccRzSJoQ.s:1137   .text:0000000000000410 .LBE201
     /tmp/ccRzSJoQ.s:5188   .debug_loc:00000000000008d0 .LLST6
     /tmp/ccRzSJoQ.s:1150   .text:0000000000000430 .LBB204
     /tmp/ccRzSJoQ.s:1157   .text:0000000000000434 .LBE204
     /tmp/ccRzSJoQ.s:5196   .debug_loc:00000000000008f4 .LLST7
     /tmp/ccRzSJoQ.s:1244   .text:0000000000000480 .LBB215
     /tmp/ccRzSJoQ.s:1303   .text:00000000000004d8 .LBE215
     /tmp/ccRzSJoQ.s:5203   .debug_loc:0000000000000917 .LLST10
     /tmp/ccRzSJoQ.s:1255   .text:000000000000048c .LBB218
     /tmp/ccRzSJoQ.s:1262   .text:0000000000000490 .LBE218
     /tmp/ccRzSJoQ.s:5214   .debug_loc:000000000000094d .LLST11
     /tmp/ccRzSJoQ.s:5222   .debug_loc:0000000000000971 .LLST12
     /tmp/ccRzSJoQ.s:1267   .text:000000000000049c .LVL84
     /tmp/ccRzSJoQ.s:1299   .text:00000000000004d4 .LVL87
     /tmp/ccRzSJoQ.s:125    .text:0000000000000080 .LBB192
     /tmp/ccRzSJoQ.s:142    .text:000000000000008c .LBE192
     /tmp/ccRzSJoQ.s:166    .text:00000000000000c0 .LVL4
     /tmp/ccRzSJoQ.s:59     .text:0000000000000040 .LFB46
     /tmp/ccRzSJoQ.s:88     .text:0000000000000060 .LFE46
     /tmp/ccRzSJoQ.s:5366   .debug_str:0000000000000179 .LASF143
     /tmp/ccRzSJoQ.s:5632   .debug_str:0000000000000a22 .LASF147
     /tmp/ccRzSJoQ.s:5500   .debug_str:0000000000000588 .LASF144
     /tmp/ccRzSJoQ.s:5628   .debug_str:0000000000000a0a .LASF145
     /tmp/ccRzSJoQ.s:5568   .debug_str:000000000000077e .LASF146
     /tmp/ccRzSJoQ.s:5564   .debug_str:0000000000000761 .LASF148
     /tmp/ccRzSJoQ.s:5530   .debug_str:0000000000000665 .LASF149
     /tmp/ccRzSJoQ.s:5592   .debug_str:000000000000083b .LASF150
     /tmp/ccRzSJoQ.s:5608   .debug_str:0000000000000975 .LASF151
     /tmp/ccRzSJoQ.s:5322   .debug_str:0000000000000037 .LASF156
     /tmp/ccRzSJoQ.s:5624   .debug_str:00000000000009f0 .LASF158
     /tmp/ccRzSJoQ.s:5386   .debug_str:000000000000020e .LASF152
     /tmp/ccRzSJoQ.s:5324   .debug_str:000000000000003d .LASF154
     /tmp/ccRzSJoQ.s:5604   .debug_str:0000000000000956 .LASF153
     /tmp/ccRzSJoQ.s:5638   .debug_str:0000000000000a49 .LASF155
     /tmp/ccRzSJoQ.s:5476   .debug_str:00000000000004a9 .LASF157
GAS LISTING /tmp/ccRzSJoQ.s 			page 51


     /tmp/ccRzSJoQ.s:5528   .debug_str:0000000000000655 .LASF159
     /tmp/ccRzSJoQ.s:5640   .debug_str:0000000000000a56 .LASF160
     /tmp/ccRzSJoQ.s:37     .text:000000000000002c .LVL1
     /tmp/ccRzSJoQ.s:46     .text:000000000000003c .LVL2
     /tmp/ccRzSJoQ.s:140    .text:000000000000008c .LVL3
     /tmp/ccRzSJoQ.s:171    .text:00000000000000c4 .LVL5
     /tmp/ccRzSJoQ.s:232    .text:00000000000000f4 .LVL7
     /tmp/ccRzSJoQ.s:535    .text:000000000000019c .LVL13
     /tmp/ccRzSJoQ.s:598    .text:00000000000001bc .LVL17
     /tmp/ccRzSJoQ.s:662    .text:00000000000001f4 .LVL23
     /tmp/ccRzSJoQ.s:722    .text:0000000000000224 .LVL31
     /tmp/ccRzSJoQ.s:767    .text:000000000000024c .LVL37
     /tmp/ccRzSJoQ.s:1055   .text:00000000000003e4 .LVL66
     /tmp/ccRzSJoQ.s:1084   .text:00000000000003ec .LVL67
     /tmp/ccRzSJoQ.s:1096   .text:00000000000003f8 .LVL69
     /tmp/ccRzSJoQ.s:227    .text:00000000000000f0 .LVL6
     /tmp/ccRzSJoQ.s:465    .text:0000000000000154 .LVL8
     /tmp/ccRzSJoQ.s:674    .text:00000000000001fc .LVL24
     /tmp/ccRzSJoQ.s:730    .text:000000000000022c .LVL32
     /tmp/ccRzSJoQ.s:576    .text:00000000000001ac .LVL15
     /tmp/ccRzSJoQ.s:587    .text:00000000000001b4 .LVL16
     /tmp/ccRzSJoQ.s:565    .text:00000000000001a4 .LVL14
     /tmp/ccRzSJoQ.s:794    .text:0000000000000264 .LVL39
     /tmp/ccRzSJoQ.s:813    .text:0000000000000294 .LVL43
     /tmp/ccRzSJoQ.s:825    .text:00000000000002ac .LVL45
     /tmp/ccRzSJoQ.s:878    .text:0000000000000300 .LVL50
     /tmp/ccRzSJoQ.s:832    .text:00000000000002b8 .LVL46
     /tmp/ccRzSJoQ.s:839    .text:00000000000002c0 .LVL47
     /tmp/ccRzSJoQ.s:998    .text:0000000000000380 .LVL58
     /tmp/ccRzSJoQ.s:1016   .text:0000000000000398 .LVL60
     /tmp/ccRzSJoQ.s:1046   .text:00000000000003d0 .LVL64
     /tmp/ccRzSJoQ.s:1049   .text:00000000000003d8 .LVL65
     /tmp/ccRzSJoQ.s:884    .text:0000000000000304 .LVL51
     /tmp/ccRzSJoQ.s:891    .text:000000000000030c .LVL52
     /tmp/ccRzSJoQ.s:919    .text:000000000000033c .LVL54
     /tmp/ccRzSJoQ.s:940    .text:0000000000000358 .LVL56
     /tmp/ccRzSJoQ.s:1005   .text:000000000000038c .LVL59
     /tmp/ccRzSJoQ.s:1032   .text:00000000000003b8 .LVL63
     /tmp/ccRzSJoQ.s:1028   .text:00000000000003a8 .LVL62
     /tmp/ccRzSJoQ.s:868    .text:00000000000002ec .LVL49
     /tmp/ccRzSJoQ.s:507    .text:000000000000018c .LVL10
     /tmp/ccRzSJoQ.s:516    .text:0000000000000190 .LVL11
     /tmp/ccRzSJoQ.s:523    .text:0000000000000194 .LVL12
     /tmp/ccRzSJoQ.s:739    .text:000000000000023c .LVL34
     /tmp/ccRzSJoQ.s:748    .text:0000000000000240 .LVL35
     /tmp/ccRzSJoQ.s:755    .text:0000000000000244 .LVL36
     /tmp/ccRzSJoQ.s:676    .text:0000000000000200 .LVL25
     /tmp/ccRzSJoQ.s:684    .text:0000000000000208 .LVL26
     /tmp/ccRzSJoQ.s:694    .text:0000000000000214 .LVL28
     /tmp/ccRzSJoQ.s:703    .text:0000000000000218 .LVL29
     /tmp/ccRzSJoQ.s:710    .text:000000000000021c .LVL30
     /tmp/ccRzSJoQ.s:612    .text:00000000000001c8 .LVL19
     /tmp/ccRzSJoQ.s:621    .text:00000000000001cc .LVL20
     /tmp/ccRzSJoQ.s:628    .text:00000000000001d0 .LVL21
     /tmp/ccRzSJoQ.s:637    .text:00000000000001d4 .LVL22
     /tmp/ccRzSJoQ.s:1090   .text:00000000000003f4 .LVL68
     /tmp/ccRzSJoQ.s:1106   .text:0000000000000400 .LVL71
GAS LISTING /tmp/ccRzSJoQ.s 			page 52


     /tmp/ccRzSJoQ.s:1108   .text:0000000000000404 .LVL72
     /tmp/ccRzSJoQ.s:1122   .text:0000000000000408 .LVL73
     /tmp/ccRzSJoQ.s:1238   .text:0000000000000480 .LVL81
     /tmp/ccRzSJoQ.s:1210   .text:0000000000000470 .LVL78
     /tmp/ccRzSJoQ.s:1219   .text:0000000000000474 .LVL79
     /tmp/ccRzSJoQ.s:1226   .text:0000000000000478 .LVL80
     /tmp/ccRzSJoQ.s:1099   .text:00000000000003fc .LVL70
     /tmp/ccRzSJoQ.s:1134   .text:0000000000000410 .LVL74
     /tmp/ccRzSJoQ.s:1149   .text:0000000000000430 .LVL75
     /tmp/ccRzSJoQ.s:1155   .text:0000000000000434 .LVL76
     /tmp/ccRzSJoQ.s:1271   .text:00000000000004a0 .LVL85
     /tmp/ccRzSJoQ.s:1286   .text:00000000000004b4 .LVL86
     /tmp/ccRzSJoQ.s:1254   .text:000000000000048c .LVL82
     /tmp/ccRzSJoQ.s:1260   .text:0000000000000490 .LVL83
     /tmp/ccRzSJoQ.s:1361   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccRzSJoQ.s:1077   .text:00000000000003e4 .LBB196
     /tmp/ccRzSJoQ.s:1112   .text:0000000000000404 .LBE196
     /tmp/ccRzSJoQ.s:1119   .text:0000000000000404 .LBB221
     /tmp/ccRzSJoQ.s:1304   .text:00000000000004d8 .LBE221
     /tmp/ccRzSJoQ.s:1246   .text:0000000000000480 .LBB217
     /tmp/ccRzSJoQ.s:1273   .text:00000000000004a0 .LBE217
     /tmp/ccRzSJoQ.s:1284   .text:00000000000004b4 .LBB220
     /tmp/ccRzSJoQ.s:1301   .text:00000000000004d8 .LBE220
     /tmp/ccRzSJoQ.s:174    .text:00000000000000c4 .LBB222
     /tmp/ccRzSJoQ.s:235    .text:00000000000000f8 .LBE222
     /tmp/ccRzSJoQ.s:239    .text:00000000000000f8 .LBB377
     /tmp/ccRzSJoQ.s:246    .text:0000000000000100 .LBE377
     /tmp/ccRzSJoQ.s:250    .text:0000000000000100 .LBB378
     /tmp/ccRzSJoQ.s:259    .text:0000000000000108 .LBE378
     /tmp/ccRzSJoQ.s:263    .text:0000000000000108 .LBB379
     /tmp/ccRzSJoQ.s:274    .text:0000000000000110 .LBE379
     /tmp/ccRzSJoQ.s:278    .text:0000000000000110 .LBB380
     /tmp/ccRzSJoQ.s:291    .text:0000000000000118 .LBE380
     /tmp/ccRzSJoQ.s:295    .text:0000000000000118 .LBB381
     /tmp/ccRzSJoQ.s:310    .text:0000000000000120 .LBE381
     /tmp/ccRzSJoQ.s:314    .text:0000000000000120 .LBB382
     /tmp/ccRzSJoQ.s:331    .text:0000000000000128 .LBE382
     /tmp/ccRzSJoQ.s:335    .text:0000000000000128 .LBB383
     /tmp/ccRzSJoQ.s:354    .text:0000000000000130 .LBE383
     /tmp/ccRzSJoQ.s:358    .text:0000000000000130 .LBB384
     /tmp/ccRzSJoQ.s:379    .text:0000000000000138 .LBE384
     /tmp/ccRzSJoQ.s:383    .text:0000000000000138 .LBB385
     /tmp/ccRzSJoQ.s:406    .text:0000000000000140 .LBE385
     /tmp/ccRzSJoQ.s:410    .text:0000000000000140 .LBB386
     /tmp/ccRzSJoQ.s:435    .text:0000000000000148 .LBE386
     /tmp/ccRzSJoQ.s:439    .text:0000000000000148 .LBB387
     /tmp/ccRzSJoQ.s:642    .text:00000000000001d4 .LBE387
     /tmp/ccRzSJoQ.s:666    .text:00000000000001f4 .LBB388
     /tmp/ccRzSJoQ.s:959    .text:0000000000000358 .LBE388
     /tmp/ccRzSJoQ.s:963    .text:0000000000000358 .LBB389
     /tmp/ccRzSJoQ.s:1075   .text:00000000000003e4 .LBE389
     /tmp/ccRzSJoQ.s:776    .text:000000000000024c .LBB249
     /tmp/ccRzSJoQ.s:823    .text:00000000000002a8 .LBE249
     /tmp/ccRzSJoQ.s:827    .text:00000000000002ac .LBB275
     /tmp/ccRzSJoQ.s:948    .text:0000000000000358 .LBE275
     /tmp/ccRzSJoQ.s:974    .text:0000000000000358 .LBB276
     /tmp/ccRzSJoQ.s:1064   .text:00000000000003e4 .LBE276
GAS LISTING /tmp/ccRzSJoQ.s 			page 53


     /tmp/ccRzSJoQ.s:947    .text:0000000000000358 .LBE252
     /tmp/ccRzSJoQ.s:975    .text:0000000000000358 .LBB274
     /tmp/ccRzSJoQ.s:1063   .text:00000000000003e4 .LBE274
     /tmp/ccRzSJoQ.s:851    .text:00000000000002cc .LBB255
     /tmp/ccRzSJoQ.s:856    .text:00000000000002d4 .LBE255
     /tmp/ccRzSJoQ.s:880    .text:0000000000000300 .LBB270
     /tmp/ccRzSJoQ.s:944    .text:0000000000000358 .LBE270
     /tmp/ccRzSJoQ.s:978    .text:0000000000000358 .LBB271
     /tmp/ccRzSJoQ.s:1060   .text:00000000000003e4 .LBE271

UNDEFINED SYMBOLS
console_handler
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3TCB12createThreadEPPS_PFvvEPvPm
_ZN3TCB7runningE
_Z11printStringPKc
_Z12printIntegerm
_Znwm
_ZN9Scheduler3putEP3TCB
_ZdlPv
